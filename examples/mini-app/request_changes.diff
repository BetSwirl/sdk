diff --git a/biome.json b/biome.json
index 413e223..03e1270 100644
--- a/biome.json
+++ b/biome.json
@@ -12,8 +12,7 @@
       "node_modules/**/*",
       ".turbo/**/*",
       "**/tsconfig*.json",
-      "**/documents/**/*.ts",
-      "examples/mini-app/**/*"
+      "**/documents/**/*.ts"
     ]
   },
   "formatter": {
diff --git a/examples/mini-app/.loki/reference/chrome_iphone7_Game_GameFrame_Error_Bet.png b/examples/mini-app/.loki/reference/chrome_iphone7_Game_GameFrame_Error_Bet.png
index 3207fed..ac45833 100644
Binary files a/examples/mini-app/.loki/reference/chrome_iphone7_Game_GameFrame_Error_Bet.png and b/examples/mini-app/.loki/reference/chrome_iphone7_Game_GameFrame_Error_Bet.png differ
diff --git a/examples/mini-app/.loki/reference/chrome_iphone7_Game_GameFrame_Loss.png b/examples/mini-app/.loki/reference/chrome_iphone7_Game_GameFrame_Loss.png
index 10471e0..c228a2c 100644
Binary files a/examples/mini-app/.loki/reference/chrome_iphone7_Game_GameFrame_Loss.png and b/examples/mini-app/.loki/reference/chrome_iphone7_Game_GameFrame_Loss.png differ
diff --git a/examples/mini-app/.loki/reference/chrome_iphone7_Game_GameFrame_Placing_Bet.png b/examples/mini-app/.loki/reference/chrome_iphone7_Game_GameFrame_Placing_Bet.png
index 72fd811..7ef5d9c 100644
Binary files a/examples/mini-app/.loki/reference/chrome_iphone7_Game_GameFrame_Placing_Bet.png and b/examples/mini-app/.loki/reference/chrome_iphone7_Game_GameFrame_Placing_Bet.png differ
diff --git a/examples/mini-app/.loki/reference/chrome_iphone7_Game_GameFrame_Wallet_Connected.png b/examples/mini-app/.loki/reference/chrome_iphone7_Game_GameFrame_Wallet_Connected.png
index e05bbd3..6a568b5 100644
Binary files a/examples/mini-app/.loki/reference/chrome_iphone7_Game_GameFrame_Wallet_Connected.png and b/examples/mini-app/.loki/reference/chrome_iphone7_Game_GameFrame_Wallet_Connected.png differ
diff --git a/examples/mini-app/.loki/reference/chrome_iphone7_Game_GameFrame_Wallet_Not_Connected.png b/examples/mini-app/.loki/reference/chrome_iphone7_Game_GameFrame_Wallet_Not_Connected.png
index c2ece60..cac1bfd 100644
Binary files a/examples/mini-app/.loki/reference/chrome_iphone7_Game_GameFrame_Wallet_Not_Connected.png and b/examples/mini-app/.loki/reference/chrome_iphone7_Game_GameFrame_Wallet_Not_Connected.png differ
diff --git a/examples/mini-app/.loki/reference/chrome_iphone7_Game_GameFrame_Win.png b/examples/mini-app/.loki/reference/chrome_iphone7_Game_GameFrame_Win.png
index e88bbe5..84e43a8 100644
Binary files a/examples/mini-app/.loki/reference/chrome_iphone7_Game_GameFrame_Win.png and b/examples/mini-app/.loki/reference/chrome_iphone7_Game_GameFrame_Win.png differ
diff --git a/examples/mini-app/.loki/reference/chrome_iphone7_UI_Input_Default.png b/examples/mini-app/.loki/reference/chrome_iphone7_UI_Input_Default.png
index 4ad7ced..a15ffa5 100644
Binary files a/examples/mini-app/.loki/reference/chrome_iphone7_UI_Input_Default.png and b/examples/mini-app/.loki/reference/chrome_iphone7_UI_Input_Default.png differ
diff --git a/examples/mini-app/.loki/reference/chrome_iphone7_UI_Input_Disabled.png b/examples/mini-app/.loki/reference/chrome_iphone7_UI_Input_Disabled.png
index 41d77c3..6a7a7ea 100644
Binary files a/examples/mini-app/.loki/reference/chrome_iphone7_UI_Input_Disabled.png and b/examples/mini-app/.loki/reference/chrome_iphone7_UI_Input_Disabled.png differ
diff --git a/examples/mini-app/.loki/reference/chrome_laptop_Game_GameFrame_Error_Bet.png b/examples/mini-app/.loki/reference/chrome_laptop_Game_GameFrame_Error_Bet.png
index 1bed3ce..08d255e 100644
Binary files a/examples/mini-app/.loki/reference/chrome_laptop_Game_GameFrame_Error_Bet.png and b/examples/mini-app/.loki/reference/chrome_laptop_Game_GameFrame_Error_Bet.png differ
diff --git a/examples/mini-app/.loki/reference/chrome_laptop_Game_GameFrame_Loss.png b/examples/mini-app/.loki/reference/chrome_laptop_Game_GameFrame_Loss.png
index 9b29d66..879470a 100644
Binary files a/examples/mini-app/.loki/reference/chrome_laptop_Game_GameFrame_Loss.png and b/examples/mini-app/.loki/reference/chrome_laptop_Game_GameFrame_Loss.png differ
diff --git a/examples/mini-app/.loki/reference/chrome_laptop_Game_GameFrame_Placing_Bet.png b/examples/mini-app/.loki/reference/chrome_laptop_Game_GameFrame_Placing_Bet.png
index b098c8f..6970704 100644
Binary files a/examples/mini-app/.loki/reference/chrome_laptop_Game_GameFrame_Placing_Bet.png and b/examples/mini-app/.loki/reference/chrome_laptop_Game_GameFrame_Placing_Bet.png differ
diff --git a/examples/mini-app/.loki/reference/chrome_laptop_Game_GameFrame_Wallet_Connected.png b/examples/mini-app/.loki/reference/chrome_laptop_Game_GameFrame_Wallet_Connected.png
index 74164be..e27cc7a 100644
Binary files a/examples/mini-app/.loki/reference/chrome_laptop_Game_GameFrame_Wallet_Connected.png and b/examples/mini-app/.loki/reference/chrome_laptop_Game_GameFrame_Wallet_Connected.png differ
diff --git a/examples/mini-app/.loki/reference/chrome_laptop_Game_GameFrame_Wallet_Not_Connected.png b/examples/mini-app/.loki/reference/chrome_laptop_Game_GameFrame_Wallet_Not_Connected.png
index 0daef54..b22b72a 100644
Binary files a/examples/mini-app/.loki/reference/chrome_laptop_Game_GameFrame_Wallet_Not_Connected.png and b/examples/mini-app/.loki/reference/chrome_laptop_Game_GameFrame_Wallet_Not_Connected.png differ
diff --git a/examples/mini-app/.loki/reference/chrome_laptop_Game_GameFrame_Win.png b/examples/mini-app/.loki/reference/chrome_laptop_Game_GameFrame_Win.png
index fb7f6b3..6d80c5e 100644
Binary files a/examples/mini-app/.loki/reference/chrome_laptop_Game_GameFrame_Win.png and b/examples/mini-app/.loki/reference/chrome_laptop_Game_GameFrame_Win.png differ
diff --git a/examples/mini-app/.loki/reference/chrome_laptop_UI_Input_Default.png b/examples/mini-app/.loki/reference/chrome_laptop_UI_Input_Default.png
index 7a21316..d847bdc 100644
Binary files a/examples/mini-app/.loki/reference/chrome_laptop_UI_Input_Default.png and b/examples/mini-app/.loki/reference/chrome_laptop_UI_Input_Default.png differ
diff --git a/examples/mini-app/.loki/reference/chrome_laptop_UI_Input_Disabled.png b/examples/mini-app/.loki/reference/chrome_laptop_UI_Input_Disabled.png
index 3bbcaf2..4902277 100644
Binary files a/examples/mini-app/.loki/reference/chrome_laptop_UI_Input_Disabled.png and b/examples/mini-app/.loki/reference/chrome_laptop_UI_Input_Disabled.png differ
diff --git a/examples/mini-app/.storybook/preview.tsx b/examples/mini-app/.storybook/preview.tsx
index df9871f..01e90c8 100644
--- a/examples/mini-app/.storybook/preview.tsx
+++ b/examples/mini-app/.storybook/preview.tsx
@@ -1,4 +1,5 @@
-import type { Decorator, Preview } from "@storybook/react"
+import React from "react"
+import type { Preview, Decorator } from "@storybook/react"
 import "../src/index.css"

 const withAppProviders: Decorator = (StoryComponent) => {
@@ -13,11 +14,6 @@ const preview: Preview = {
         date: /Date$/i,
       },
     },
-    options: {
-      storySort: {
-        order: ["Game", ["CoinTossGame", "*"]],
-      },
-    },
   },
   decorators: [withAppProviders],
 }
diff --git a/examples/mini-app/biome.json b/examples/mini-app/biome.json
deleted file mode 100644
index 29aad7c..0000000
--- a/examples/mini-app/biome.json
+++ /dev/null
@@ -1,9 +0,0 @@
-{
-  "$schema": "https://biomejs.dev/schemas/1.9.4/schema.json",
-  "extends": ["../../biome.json"],
-  "javascript": {
-    "formatter": {
-      "semicolons": "asNeeded"
-    }
-  }
-}
diff --git a/examples/mini-app/eslint.config.js b/examples/mini-app/eslint.config.js
new file mode 100644
index 0000000..2e47a55
--- /dev/null
+++ b/examples/mini-app/eslint.config.js
@@ -0,0 +1,28 @@
+import js from "@eslint/js"
+import reactHooks from "eslint-plugin-react-hooks"
+import reactRefresh from "eslint-plugin-react-refresh"
+import globals from "globals"
+import tseslint from "typescript-eslint"
+
+export default tseslint.config(
+  { ignores: ["dist"] },
+  {
+    extends: [js.configs.recommended, ...tseslint.configs.recommended],
+    files: ["**/*.{ts,tsx}"],
+    languageOptions: {
+      ecmaVersion: 2020,
+      globals: globals.browser,
+    },
+    plugins: {
+      "react-hooks": reactHooks,
+      "react-refresh": reactRefresh,
+    },
+    rules: {
+      ...reactHooks.configs.recommended.rules,
+      "react-refresh/only-export-components": [
+        "warn",
+        { allowConstantExport: true },
+      ],
+    },
+  },
+)
diff --git a/examples/mini-app/package.json b/examples/mini-app/package.json
index 2972213..745616f 100644
--- a/examples/mini-app/package.json
+++ b/examples/mini-app/package.json
@@ -6,16 +6,15 @@
   "scripts": {
     "dev": "vite",
     "build": "tsc -b && vite build",
-    "lint": "biome check .",
-    "lint:fix": "biome check . --write",
-    "format": "biome format . --write",
+    "lint": "eslint .",
     "preview": "vite preview",
     "storybook": "storybook dev -p 6006",
     "build-storybook": "storybook build",
+    "format": "prettier --write .",
     "test:loki": "pnpm loki test --chromeTolerance 1"
   },
   "dependencies": {
-    "@betswirl/sdk-core": "^0.1.3",
+    "@betswirl/sdk-core": "^0.1.2",
     "@coinbase/onchainkit": "^0.38.13",
     "@radix-ui/react-dialog": "^1.1.14",
     "@radix-ui/react-label": "^2.1.7",
@@ -23,6 +22,7 @@
     "@radix-ui/react-scroll-area": "^1.2.9",
     "@radix-ui/react-slider": "^1.3.5",
     "@radix-ui/react-slot": "^1.2.3",
+    "@radix-ui/react-tooltip": "^1.2.7",
     "@tailwindcss/vite": "^4.1.7",
     "@tanstack/react-query": "^5.77.2",
     "class-variance-authority": "^0.7.1",
@@ -38,8 +38,8 @@
     "wagmi": "^2.15.4"
   },
   "devDependencies": {
-    "@biomejs/biome": "^1.9.4",
     "@chromatic-com/storybook": "^3.2.6",
+    "@eslint/js": "^9.27.0",
     "@storybook/addon-essentials": "8.2.9",
     "@storybook/blocks": "8.2.9",
     "@storybook/react": "8.2.9",
@@ -51,14 +51,25 @@
     "@vitejs/plugin-react": "^4.5.0",
     "@vitest/browser": "^3.1.4",
     "@vitest/coverage-v8": "^3.1.4",
+    "eslint": "^9.27.0",
+    "eslint-plugin-react-hooks": "^5.2.0",
+    "eslint-plugin-react-refresh": "^0.4.20",
+    "eslint-plugin-storybook": "^0.12.0",
     "globals": "^16.2.0",
     "playwright": "^1.52.0",
+    "prettier": "3.5.3",
     "storybook": "8.2.9",
     "tw-animate-css": "^1.3.0",
     "typescript": "~5.7.3",
+    "typescript-eslint": "^8.32.1",
     "vite": "^6.3.5",
     "vitest": "^3.1.4"
   },
+  "eslintConfig": {
+    "extends": [
+      "plugin:storybook/recommended"
+    ]
+  },
   "loki": {
     "configurations": {
       "chrome.laptop": {
+++ b/examples/mini-app/src/components/game/BettingPanel.tsx
@@ -0,0 +1,249 @@
+import { ChangeEvent, useEffect, useRef, useState } from "react"
+import { cn } from "../../lib/utils"
+import { FORMAT_TYPE, formatRawAmount } from "@betswirl/sdk-core"
+import { Button } from "../ui/button"
+import { Input } from "../ui/input"
+import { Label } from "../ui/label"
+import { parseUnits } from "viem"
+import Decimal from "decimal.js"
+import { TokenImage } from "@coinbase/onchainkit/token"
+import { ETH_TOKEN } from "../../lib/tokens"
+import { BetStatus } from "../../types"
+
+interface BettingPanelProps {
+  balance: bigint
+  isConnected: boolean
+  tokenDecimals: number
+  betStatus: BetStatus | null
+  betAmount: bigint | undefined
+  onBetAmountChange: (amount: bigint | undefined) => void
+  onPlayBtnClick: () => void
+}
+
+const STEP = 0.0001
+
+export function BettingPanel({
+  balance,
+  isConnected,
+  tokenDecimals,
+  betStatus,
+  betAmount,
+  onBetAmountChange,
+  onPlayBtnClick,
+}: BettingPanelProps) {
+  const [betAmountError, setBetAmountError] = useState<string | null>(null)
+  const [inputValue, setInputValue] = useState<string>("")
+  const [isValidInput, setIsValidInput] = useState<boolean>(true)
+  const [isUserTyping, setIsUserTyping] = useState<boolean>(false)
+  const typingTimeoutRef = useRef<NodeJS.Timeout | null>(null)
+
+  useEffect(() => {
+    return () => {
+      if (typingTimeoutRef.current) {
+        clearTimeout(typingTimeoutRef.current)
+      }
+    }
+  }, [])
+
+  useEffect(() => {
+    if (isUserTyping) return
+
+    if (betAmount === undefined) {
+      setInputValue("")
+      setIsValidInput(true)
+    } else {
+      const formatted = formatRawAmount(
+        betAmount,
+        tokenDecimals,
+        FORMAT_TYPE.PRECISE,
+      )
+      setInputValue(formatted)
+      setIsValidInput(true)
+    }
+  }, [betAmount, tokenDecimals, isUserTyping])
+
+  const isBetAmountValid = betAmount && betAmount > 0n
+  const formattedBalance = formatRawAmount(balance, tokenDecimals)
+  const isInGameResultState = betStatus === "success"
+  const isBettingInProgress = betStatus === "pending"
+  const canInitiateBet = isConnected && isBetAmountValid && !isBettingInProgress
+  const isErrorState = betStatus === "error"
+
+  const isPlayButtonDisabled: boolean = isErrorState
+    ? false
+    : isInGameResultState
+      ? false
+      : !canInitiateBet
+
+  const isInputDisabled =
+    !isConnected || isBettingInProgress || isInGameResultState
+
+  let playButtonText: string
+  if (isErrorState) {
+    playButtonText = "Error, try again"
+  } else if (isInGameResultState) {
+    playButtonText = "Try again"
+  } else if (isBettingInProgress) {
+    playButtonText = "Placing Bet..."
+  } else if (!isConnected) {
+    playButtonText = "Connect Wallet"
+  } else {
+    playButtonText = "Place Bet"
+  }
+
+  const handlePlayBtnClick = () => {
+    if (isInGameResultState) {
+      onBetAmountChange(undefined)
+      setInputValue("")
+    }
+    onPlayBtnClick()
+  }
+
+  const handleHalfBet = () => {
+    const currentAmount = betAmount ?? 0n
+    if (currentAmount > 0n) {
+      const halfAmount = currentAmount / 2n
+      onBetAmountChange(halfAmount)
+    }
+  }
+
+  const handleDoubleBet = () => {
+    const currentAmount = betAmount ?? 0n
+    const doubledAmount = currentAmount * 2n
+    if (isConnected) {
+      const maxAmount = balance
+      const finalAmount = doubledAmount > maxAmount ? maxAmount : doubledAmount
+      onBetAmountChange(finalAmount)
+    } else {
+      onBetAmountChange(doubledAmount)
+    }
+  }
+
+  const handleMaxBet = () => {
+    if (isConnected) {
+      onBetAmountChange(balance)
+    }
+  }
+
+  const handleInputChange = (e: ChangeEvent<HTMLInputElement>) => {
+    const newInputValue = e.target.value
+    setInputValue(newInputValue)
+    setIsUserTyping(true)
+
+    if (typingTimeoutRef.current) {
+      clearTimeout(typingTimeoutRef.current)
+    }
+
+    typingTimeoutRef.current = setTimeout(() => {
+      setIsUserTyping(false)
+    }, 1000)
+
+    if (newInputValue === "") {
+      onBetAmountChange(undefined)
+      setIsValidInput(true)
+      setBetAmountError(null)
+      return
+    }
+
+    try {
+      new Decimal(newInputValue)
+
+      try {
+        const weiValue = parseUnits(newInputValue, tokenDecimals)
+        onBetAmountChange(weiValue)
+        setIsValidInput(true)
+        setBetAmountError(null)
+      } catch {
+        setIsValidInput(false)
+        setBetAmountError(null)
+      }
+    } catch {
+      setIsValidInput(false)
+      setBetAmountError(null)
+    }
+  }
+
+  return (
+    <div className="bg-control-panel-background p-4 rounded-[16px] flex flex-col gap-4">
+      <div className="flex flex-col gap-3">
+        <div className="text-sm font-medium flex items-center">
+          <span className="text-text-on-surface-variant">Balance:&nbsp;</span>
+          <span className="font-semibold">{formattedBalance}</span>
+          <TokenImage token={ETH_TOKEN} size={16} className="ml-1" />
+        </div>
+
+        <Label
+          htmlFor="betAmount"
+          className="text-sm font-medium -mb-1 text-text-on-surface-variant"
+        >
+          Bet amount
+        </Label>
+        <Input
+          id="betAmount"
+          type="number"
+          placeholder="0"
+          min={0}
+          max={Number.parseFloat(formattedBalance)}
+          step={STEP}
+          value={inputValue}
+          onChange={handleInputChange}
+          className={cn(
+            "relative",
+            !isValidInput && "[&_input]:text-muted-foreground",
+          )}
+          token={{
+            icon: <TokenImage token={ETH_TOKEN} size={16} />,
+            symbol: "ETH",
+          }}
+          disabled={isInputDisabled}
+        />
+        {betAmountError && (
+          <div className="text-red-500 text-xs mt-1">{betAmountError}</div>
+        )}
+
+        <div className="grid grid-cols-3 gap-2">
+          <Button
+            variant="secondary"
+            onClick={handleHalfBet}
+            className="border border-border-stroke rounded-[8px] h-[30px] w-[85.33px] text-text-on-surface"
+            disabled={isInputDisabled}
+          >
+            1/2
+          </Button>
+          <Button
+            variant="secondary"
+            onClick={handleDoubleBet}
+            className="border border-border-stroke rounded-[8px] h-[30px] w-[85.33px] text-text-on-surface"
+            disabled={isInputDisabled}
+          >
+            2x
+          </Button>
+          <Button
+            variant="secondary"
+            className="border border-border-stroke rounded-[8px] h-[30px] w-[85.33px] text-text-on-surface"
+            onClick={handleMaxBet}
+            disabled={isInputDisabled}
+          >
+            Max
+          </Button>
+        </div>
+      </div>
+
+      <Button
+        size="lg"
+        className={cn(
+          "w-full",
+          "border-0",
+          "font-bold",
+          "rounded-[16px]",
+          "text-play-btn-font",
+        )}
+        variant={isErrorState ? "destructive" : "default"}
+        onClick={handlePlayBtnClick}
+        disabled={isPlayButtonDisabled}
+      >
+        {playButtonText}
+      </Button>
+    </div>
+  )
+}
diff --git a/examples/mini-app/src/components/game/CoinTossGame.stories.tsx b/examples/mini-app/src/components/game/CoinTossGame.stories.tsx
index 5263d68..7a9208a 100644
--- a/examples/mini-app/src/components/game/CoinTossGame.stories.tsx
+++ b/examples/mini-app/src/components/game/CoinTossGame.stories.tsx
@@ -1,7 +1,7 @@
 import type { Meta, StoryObj } from "@storybook/react"
+import { CoinTossGame } from "./CoinTossGame"
 import gameBg from "../../assets/game/game-background-1.png"
 import { AppProviders } from "../../providers"
-import { CoinTossGame } from "./CoinTossGame"

 const meta = {
   title: "Game/CoinTossGame",
diff --git a/examples/mini-app/src/components/game/CoinTossGame.tsx b/examples/mini-app/src/components/game/CoinTossGame.tsx
index 9aaa61c..11dbc44 100644
--- a/examples/mini-app/src/components/game/CoinTossGame.tsx
+++ b/examples/mini-app/src/components/game/CoinTossGame.tsx
@@ -2,19 +2,24 @@ import React, { useState } from "react"
 import coinTossBackground from "../../assets/game/game-background.png"
 import { cn } from "../../lib/utils"

-import { Avatar, Name } from "@coinbase/onchainkit/identity"
 import { ConnectWallet, Wallet } from "@coinbase/onchainkit/wallet"
+import { Avatar, Name } from "@coinbase/onchainkit/identity"
+import { TokenImage } from "@coinbase/onchainkit/token"
 import { useAccount, useBalance } from "wagmi"

-import { CASINO_GAME_TYPE, COINTOSS_FACE } from "@betswirl/sdk-core"
-import { useGameHistory } from "../../hooks/useGameHistory"
-import { usePlaceBet } from "../../hooks/usePlaceBet"
+import { type HistoryEntry } from "./HistorySheetPanel"
+import { ETH_TOKEN } from "../../lib/tokens"
+
+import { useCoinTossPlaceBet } from "../../hooks/useCoinTossPlaceBet"
+import { COINTOSS_FACE } from "@betswirl/sdk-core"
 import { GameFrame } from "./GameFrame"
+import { CoinTossGameControls } from "./CoinTossGameControls"

 const MULTIPLIER = 1940n
 const PRECISION = 10000n

-export interface CoinTossGameProps extends React.HTMLAttributes<HTMLDivElement> {
+export interface CoinTossGameProps
+  extends React.HTMLAttributes<HTMLDivElement> {
   theme?: "light" | "dark" | "system"
   customTheme?: {
     "--primary"?: string
@@ -24,6 +29,81 @@ export interface CoinTossGameProps extends React.HTMLAttributes<HTMLDivElement>
   backgroundImage?: string
 }

+const mockHistoryData: HistoryEntry[] = [
+  {
+    id: "1",
+    status: "Won bet",
+    multiplier: 1.94,
+    payoutAmount: "1.94675",
+    payoutCurrencyIcon: <TokenImage token={ETH_TOKEN} size={14} />,
+    timestamp: "~24h ago",
+  },
+  {
+    id: "2",
+    status: "Won bet",
+    multiplier: 1.2,
+    payoutAmount: 0.2,
+    payoutCurrencyIcon: <TokenImage token={ETH_TOKEN} size={14} />,
+    timestamp: "~2h ago",
+  },
+  {
+    id: "3",
+    status: "Busted",
+    multiplier: 1.94,
+    payoutAmount: 1.94,
+    payoutCurrencyIcon: <TokenImage token={ETH_TOKEN} size={14} />,
+    timestamp: "~2h ago",
+  },
+  {
+    id: "4",
+    status: "Won bet",
+    multiplier: 1.946,
+    payoutAmount: 2.453,
+    payoutCurrencyIcon: <TokenImage token={ETH_TOKEN} size={14} />,
+    timestamp: "~2h ago",
+  },
+  {
+    id: "5",
+    status: "Busted",
+    multiplier: 1.94,
+    payoutAmount: 1.94,
+    payoutCurrencyIcon: <TokenImage token={ETH_TOKEN} size={14} />,
+    timestamp: "~2h ago",
+  },
+  {
+    id: "6",
+    status: "Won bet",
+    multiplier: 1.946,
+    payoutAmount: 2.453,
+    payoutCurrencyIcon: <TokenImage token={ETH_TOKEN} size={14} />,
+    timestamp: "~2h ago",
+  },
+  {
+    id: "7",
+    status: "Won bet",
+    multiplier: 1.94,
+    payoutAmount: 0.1,
+    payoutCurrencyIcon: <TokenImage token={ETH_TOKEN} size={14} />,
+    timestamp: "~2h ago",
+  },
+  {
+    id: "8",
+    status: "Won bet",
+    multiplier: 1.94,
+    payoutAmount: 0.1,
+    payoutCurrencyIcon: <TokenImage token={ETH_TOKEN} size={14} />,
+    timestamp: "~2h ago",
+  },
+  {
+    id: "9",
+    status: "Won bet",
+    multiplier: 1.94,
+    payoutAmount: 0.1,
+    payoutCurrencyIcon: <TokenImage token={ETH_TOKEN} size={14} />,
+    timestamp: "~2h ago",
+  },
+]
+
 export function CoinTossGame({
   theme = "system",
   customTheme,
@@ -32,70 +112,64 @@ export function CoinTossGame({
 }: CoinTossGameProps) {
   const themeSettings = { theme, customTheme, backgroundImage }
   const { isConnected: isWalletConnected, address } = useAccount()
-  const { gameHistory, refreshHistory } = useGameHistory(CASINO_GAME_TYPE.COINTOSS)
   const { data: balance } = useBalance({
     address,
   })
   const tokenDecimals = balance?.decimals ?? 18

   const [betAmount, setBetAmount] = useState<bigint | undefined>(undefined)
+  const [selectedSide, setSelectedSide] = useState<COINTOSS_FACE>(
+    COINTOSS_FACE.HEADS,
+  )

-  const { placeBet, betStatus, gameResult, resetBetState } = usePlaceBet()
+  const { placeCoinTossBet, betStatus, gameResult, resetBetState } =
+    useCoinTossPlaceBet()
   const isInGameResultState = !!gameResult
+  const isControlsDisabled =
+    !isWalletConnected || betStatus === "pending" || isInGameResultState

-  const targetPayoutAmount = betAmount && betAmount > 0n ? (betAmount * MULTIPLIER) / PRECISION : 0n
+  const targetPayoutAmount =
+    betAmount && betAmount > 0n ? (betAmount * MULTIPLIER) / PRECISION : 0n

-  const handlePlayButtonClick = (selectedSide: COINTOSS_FACE) => {
+  const handlePlayButtonClick = () => {
     if (betStatus === "error" || isInGameResultState) {
       resetBetState()
-    } else if (isWalletConnected && betAmount && betAmount > 0n) {
-      placeBet(betAmount, selectedSide)
     }
-  }

-  const handleHalfBet = () => {
-    const currentAmount = betAmount ?? 0n
-    if (currentAmount > 0n) {
-      setBetAmount(currentAmount / 2n)
+    if (isWalletConnected && betAmount && betAmount > 0n) {
+      placeCoinTossBet(betAmount, selectedSide)
     }
   }

-  const handleDoubleBet = () => {
-    const currentAmount = betAmount ?? 0n
-    const doubledAmount = currentAmount * 2n
-    // Only limit to balance if connected
-    if (isWalletConnected) {
-      const maxAmount = balance?.value ?? 0n
-      setBetAmount(doubledAmount > maxAmount ? maxAmount : doubledAmount)
-    } else {
-      setBetAmount(doubledAmount)
+  const handleCoinClick = () => {
+    if (isControlsDisabled) {
+      return
     }
+    setSelectedSide((prevSide) =>
+      prevSide === COINTOSS_FACE.HEADS
+        ? COINTOSS_FACE.TAILS
+        : COINTOSS_FACE.HEADS,
+    )
   }

-  const handleMaxBet = () => {
-    if (isWalletConnected) {
-      setBetAmount(balance?.value ?? 0n)
-    }
+  const handleBetAmountChange = (amount: bigint | undefined) => {
+    setBetAmount(amount)
   }

   return (
     <GameFrame
       {...props}
       onPlayBtnClick={handlePlayButtonClick}
-      historyData={gameHistory}
+      historyData={mockHistoryData}
       tokenDecimals={tokenDecimals}
       themeSettings={themeSettings}
       isConnected={isWalletConnected}
       balance={balance?.value ?? 0n}
       betAmount={betAmount}
-      setBetAmount={setBetAmount}
       targetPayoutAmount={targetPayoutAmount}
-      onHalfBet={handleHalfBet}
-      onDoubleBet={handleDoubleBet}
-      onMaxBet={handleMaxBet}
+      onBetAmountChange={handleBetAmountChange}
       gameResult={gameResult}
       betStatus={betStatus}
-      onHistoryOpen={refreshHistory}
       connectWallletBtn={
         <Wallet>
           <ConnectWallet
@@ -119,6 +193,14 @@ export function CoinTossGame({
           </ConnectWallet>
         </Wallet>
       }
+      gameControls={
+        <CoinTossGameControls
+          selectedSide={selectedSide}
+          onCoinClick={handleCoinClick}
+          multiplier={1.94}
+          isDisabled={isControlsDisabled}
+        />
+      }
     />
   )
 }
diff --git a/examples/mini-app/src/components/game/CoinTossGameControls.stories.tsx b/examples/mini-app/src/components/game/CoinTossGameControls.stories.tsx
new file mode 100644
index 0000000..cb19034
--- /dev/null
+++ b/examples/mini-app/src/components/game/CoinTossGameControls.stories.tsx
@@ -0,0 +1,154 @@
+import type { Meta, StoryObj } from "@storybook/react"
+import { fn } from "@storybook/test"
+import { useState } from "react"
+import { COINTOSS_FACE } from "@betswirl/sdk-core"
+import { CoinTossGameControls } from "./CoinTossGameControls"
+
+const meta = {
+  title: "Game/CoinTossGameControls",
+  component: CoinTossGameControls,
+  parameters: {
+    layout: "centered",
+    backgrounds: {
+      default: "dark",
+      values: [
+        { name: "light", value: "#FFFFFF" },
+        { name: "dark", value: "#1a1a1a" },
+        { name: "game", value: "#0a0a0a" },
+      ],
+    },
+  },
+  tags: ["autodocs"],
+  argTypes: {
+    selectedSide: {
+      control: "radio",
+      options: [COINTOSS_FACE.HEADS, COINTOSS_FACE.TAILS],
+      description: "The currently selected coin side",
+      table: {
+        type: { summary: "COINTOSS_FACE" },
+        defaultValue: { summary: "COINTOSS_FACE.HEADS" },
+      },
+    },
+    multiplier: {
+      control: { type: "number", min: 1, max: 10, step: 0.01 },
+      description: "The multiplier value displayed above the coin",
+      table: {
+        type: { summary: "number" },
+        defaultValue: { summary: "1.94" },
+      },
+    },
+    isDisabled: {
+      control: "boolean",
+      description: "Whether the coin button is disabled",
+      table: {
+        type: { summary: "boolean" },
+        defaultValue: { summary: "false" },
+      },
+    },
+    onCoinClick: {
+      description: "Callback function called when the coin is clicked",
+      table: {
+        type: { summary: "() => void" },
+      },
+    },
+  },
+  args: {
+    selectedSide: COINTOSS_FACE.HEADS,
+    multiplier: 1.94,
+    isDisabled: false,
+    onCoinClick: fn(),
+  },
+  decorators: [
+    (Story) => (
+      <div className="relative w-[300px] h-[200px] bg-gradient-to-b from-blue-900 to-purple-900 rounded-lg overflow-hidden">
+        <Story />
+      </div>
+    ),
+  ],
+} satisfies Meta<typeof CoinTossGameControls>
+
+export default meta
+type Story = StoryObj<typeof meta>
+
+function InteractiveCoinTossControls({
+  initialSelectedSide = COINTOSS_FACE.HEADS,
+  multiplier = 1.94,
+  isDisabled = false,
+}: {
+  initialSelectedSide?: COINTOSS_FACE
+  multiplier?: number
+  isDisabled?: boolean
+}) {
+  const [selectedSide, setSelectedSide] = useState(initialSelectedSide)
+
+  const handleCoinClick = () => {
+    if (isDisabled) return
+    setSelectedSide((prevSide) =>
+      prevSide === COINTOSS_FACE.HEADS
+        ? COINTOSS_FACE.TAILS
+        : COINTOSS_FACE.HEADS,
+    )
+  }
+
+  return (
+    <div className="relative w-[300px] h-[200px] bg-gradient-to-b from-blue-900 to-purple-900 rounded-lg overflow-hidden">
+      <CoinTossGameControls
+        selectedSide={selectedSide}
+        onCoinClick={handleCoinClick}
+        multiplier={multiplier}
+        isDisabled={isDisabled}
+      />
+    </div>
+  )
+}
+
+export const Default: Story = {
+  name: "Default (Heads)",
+  args: {},
+}
+
+export const TailsSelected: Story = {
+  name: "Tails Selected",
+  args: {
+    selectedSide: COINTOSS_FACE.TAILS,
+  },
+}
+
+export const DisabledHeads: Story = {
+  name: "Disabled (Heads)",
+  args: {
+    isDisabled: true,
+  },
+}
+
+export const DisabledTails: Story = {
+  name: "Disabled (Tails)",
+  args: {
+    selectedSide: COINTOSS_FACE.TAILS,
+    isDisabled: true,
+  },
+}
+
+export const Interactive: Story = {
+  name: "Interactive",
+  render: (args) => (
+    <InteractiveCoinTossControls
+      initialSelectedSide={args.selectedSide}
+      multiplier={args.multiplier}
+      isDisabled={args.isDisabled}
+    />
+  ),
+  args: {
+    selectedSide: COINTOSS_FACE.HEADS,
+    multiplier: 2.5,
+    isDisabled: false,
+  },
+  parameters: {
+    docs: {
+      description: {
+        story:
+          "Click the coin to toggle between HEADS and TAILS. The component state updates in real-time to demonstrate interactivity.",
+      },
+    },
+  },
+}
diff --git a/examples/mini-app/src/components/game/CoinTossGameControls.tsx b/examples/mini-app/src/components/game/CoinTossGameControls.tsx
new file mode 100644
index 0000000..70f0d85
--- /dev/null
+++ b/examples/mini-app/src/components/game/CoinTossGameControls.tsx
@@ -0,0 +1,43 @@
+import { COINTOSS_FACE } from "@betswirl/sdk-core"
+import { Button } from "../ui/button"
+import coinHeadsIcon from "../../assets/game/coin-heads.svg"
+import coinTailsIcon from "../../assets/game/coin-tails.svg"
+
+interface CoinTossGameControlsProps {
+  selectedSide: COINTOSS_FACE
+  onCoinClick: () => void
+  multiplier: number
+  isDisabled: boolean
+}
+
+export function CoinTossGameControls({
+  selectedSide,
+  onCoinClick,
+  multiplier,
+  isDisabled,
+}: CoinTossGameControlsProps) {
+  const currentCoinIcon =
+    selectedSide === COINTOSS_FACE.HEADS ? coinHeadsIcon : coinTailsIcon
+
+  return (
+    <>
+      <div className="absolute top-1/5 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-[26px] font-extrabold leading-[34px] text-white">
+        {multiplier.toFixed(2)} x
+      </div>
+      <Button
+        variant="coinButton"
+        size="coin"
+        onClick={onCoinClick}
+        disabled={isDisabled}
+        aria-label={`Select ${selectedSide === COINTOSS_FACE.HEADS ? "Tails" : "Heads"} side`}
+        className="absolute top-[62px] left-1/2 transform -translate-x-1/2 mt-2"
+      >
+        <img
+          src={currentCoinIcon}
+          alt={selectedSide === COINTOSS_FACE.HEADS ? "Heads" : "Tails"}
+          className="h-full w-auto pointer-events-none"
+        />
+      </Button>
+    </>
+  )
+}
diff --git a/examples/mini-app/src/components/game/DiceGame.stories.tsx b/examples/mini-app/src/components/game/DiceGame.stories.tsx
new file mode 100644
index 0000000..aa04bc9
--- /dev/null
+++ b/examples/mini-app/src/components/game/DiceGame.stories.tsx
@@ -0,0 +1,111 @@
+import type { Meta, StoryObj } from "@storybook/react"
+import gameBg from "../../assets/game/game-background-1.png"
+import { AppProviders } from "../../providers"
+import { DiceGame } from "./DiceGame"
+
+const meta = {
+  title: "Game/DiceGame",
+  component: DiceGame,
+  parameters: {
+    layout: "centered",
+    backgrounds: {
+      default: "light",
+      values: [
+        { name: "light", value: "#FFFFFF" },
+        { name: "dark", value: "oklch(0.15 0 0)" },
+      ],
+    },
+    loki: {
+      skip: true,
+    },
+  },
+  decorators: [
+    (Story) => (
+      <AppProviders>
+        <Story />
+      </AppProviders>
+    ),
+  ],
+  tags: ["autodocs"],
+  argTypes: {
+    theme: {
+      control: "radio",
+      options: ["light", "dark", "system"],
+    },
+    customTheme: {
+      control: "object",
+      description: "Custom theme",
+      table: {
+        type: {
+          summary: "object",
+          detail: `{
+            "--primary": string,
+            "--play-btn-font": string,
+            "--game-window-overlay": string,
+          }`,
+        },
+      },
+    },
+    backgroundImage: {
+      control: "file",
+      description: "Background image",
+      accept: "image/*",
+    },
+  },
+} satisfies Meta<typeof DiceGame>
+
+export default meta
+type Story = StoryObj<typeof meta>
+
+const Template: Story = {
+  render: (args) => <DiceGame {...args} />,
+}
+
+export const LightTheme: Story = {
+  ...Template,
+  args: {
+    theme: "light",
+  },
+}
+
+export const DarkTheme: Story = {
+  ...Template,
+  args: {
+    theme: "dark",
+  },
+  parameters: {
+    backgrounds: { default: "dark" },
+  },
+}
+
+export const SystemTheme: Story = {
+  ...Template,
+  args: {
+    theme: "system",
+  },
+}
+
+export const CustomTheme1: Story = {
+  ...Template,
+  args: {
+    theme: "light",
+    customTheme: {
+      "--primary": "#4dae52",
+      "--play-btn-font": "#1B5E20",
+      "--game-window-overlay": "oklch(0 0 0 / 40%)",
+    } as React.CSSProperties,
+  },
+}
+
+export const CustomTheme2: Story = {
+  ...Template,
+  args: {
+    theme: "light",
+    customTheme: {
+      "--primary": "#6AB3D3",
+      "--play-btn-font": "#ffffff",
+      "--game-window-overlay": "oklch(0 0 0 / 10%)",
+    } as React.CSSProperties,
+    backgroundImage: gameBg,
+  },
+}
diff --git a/examples/mini-app/src/components/game/DiceGame.tsx b/examples/mini-app/src/components/game/DiceGame.tsx
new file mode 100644
index 0000000..c5162ce
--- /dev/null
+++ b/examples/mini-app/src/components/game/DiceGame.tsx
@@ -0,0 +1,196 @@
+import React, { useState } from "react"
+import diceBackground from "../../assets/game/game-background.png"
+import { cn } from "../../lib/utils"
+
+import { ConnectWallet, Wallet } from "@coinbase/onchainkit/wallet"
+import { Avatar, Name } from "@coinbase/onchainkit/identity"
+import { TokenImage } from "@coinbase/onchainkit/token"
+import { useAccount, useBalance } from "wagmi"
+
+import { type HistoryEntry } from "./HistorySheetPanel"
+import { ETH_TOKEN } from "../../lib/tokens"
+
+import { GameFrame } from "./GameFrame"
+import { useDicePlaceBet } from "../../hooks/useDicePlaceBet"
+import { DiceGameControls } from "./DiceGameControls"
+import { DiceNumber } from "@betswirl/sdk-core"
+
+const MULTIPLIER = 1940n
+const PRECISION = 10000n
+
+export interface DiceGameProps extends React.HTMLAttributes<HTMLDivElement> {
+  theme?: "light" | "dark" | "system"
+  customTheme?: {
+    "--primary"?: string
+    "--play-btn-font"?: string
+    "--game-window-overlay"?: string
+  } & React.CSSProperties
+  backgroundImage?: string
+}
+
+const mockHistoryData: HistoryEntry[] = [
+  {
+    id: "1",
+    status: "Won bet",
+    multiplier: 1.94,
+    payoutAmount: "1.94675",
+    payoutCurrencyIcon: <TokenImage token={ETH_TOKEN} size={14} />,
+    timestamp: "~24h ago",
+  },
+  {
+    id: "2",
+    status: "Won bet",
+    multiplier: 1.2,
+    payoutAmount: 0.2,
+    payoutCurrencyIcon: <TokenImage token={ETH_TOKEN} size={14} />,
+    timestamp: "~2h ago",
+  },
+  {
+    id: "3",
+    status: "Busted",
+    multiplier: 1.94,
+    payoutAmount: 1.94,
+    payoutCurrencyIcon: <TokenImage token={ETH_TOKEN} size={14} />,
+    timestamp: "~2h ago",
+  },
+  {
+    id: "4",
+    status: "Won bet",
+    multiplier: 1.946,
+    payoutAmount: 2.453,
+    payoutCurrencyIcon: <TokenImage token={ETH_TOKEN} size={14} />,
+    timestamp: "~2h ago",
+  },
+  {
+    id: "5",
+    status: "Busted",
+    multiplier: 1.94,
+    payoutAmount: 1.94,
+    payoutCurrencyIcon: <TokenImage token={ETH_TOKEN} size={14} />,
+    timestamp: "~2h ago",
+  },
+  {
+    id: "6",
+    status: "Won bet",
+    multiplier: 1.946,
+    payoutAmount: 2.453,
+    payoutCurrencyIcon: <TokenImage token={ETH_TOKEN} size={14} />,
+    timestamp: "~2h ago",
+  },
+  {
+    id: "7",
+    status: "Won bet",
+    multiplier: 1.94,
+    payoutAmount: 0.1,
+    payoutCurrencyIcon: <TokenImage token={ETH_TOKEN} size={14} />,
+    timestamp: "~2h ago",
+  },
+  {
+    id: "8",
+    status: "Won bet",
+    multiplier: 1.94,
+    payoutAmount: 0.1,
+    payoutCurrencyIcon: <TokenImage token={ETH_TOKEN} size={14} />,
+    timestamp: "~2h ago",
+  },
+  {
+    id: "9",
+    status: "Won bet",
+    multiplier: 1.94,
+    payoutAmount: 0.1,
+    payoutCurrencyIcon: <TokenImage token={ETH_TOKEN} size={14} />,
+    timestamp: "~2h ago",
+  },
+]
+
+export function DiceGame({
+  theme = "system",
+  customTheme,
+  backgroundImage = diceBackground,
+  ...props
+}: DiceGameProps) {
+  const themeSettings = { theme, customTheme, backgroundImage }
+  const { isConnected: isWalletConnected, address } = useAccount()
+  const { data: balance } = useBalance({
+    address,
+  })
+  const tokenDecimals = balance?.decimals ?? 18
+
+  const [betAmount, setBetAmount] = useState<bigint | undefined>(undefined)
+  const [selectedNumber, setSelectedNumber] = useState<DiceNumber>(20)
+
+  const { placeDiceBet, betStatus, gameResult, resetBetState } =
+    useDicePlaceBet()
+  const isInGameResultState = !!gameResult
+  const isControlsDisabled =
+    !isWalletConnected || betStatus === "pending" || isInGameResultState
+
+  const targetPayoutAmount =
+    betAmount && betAmount > 0n ? (betAmount * MULTIPLIER) / PRECISION : 0n
+
+  const handlePlayButtonClick = () => {
+    if (betStatus === "error" || isInGameResultState) {
+      resetBetState()
+    }
+
+    if (isWalletConnected && betAmount && betAmount > 0n) {
+      placeDiceBet(betAmount, selectedNumber)
+    }
+  }
+
+  const handleBetAmountChange = (amount: bigint | undefined) => {
+    setBetAmount(amount)
+  }
+
+  const handleNumberChange = (value: number) => {
+    setSelectedNumber(value as DiceNumber)
+  }
+
+  return (
+    <GameFrame
+      {...props}
+      onPlayBtnClick={handlePlayButtonClick}
+      historyData={mockHistoryData}
+      tokenDecimals={tokenDecimals}
+      themeSettings={themeSettings}
+      isConnected={isWalletConnected}
+      balance={balance?.value ?? 0n}
+      betAmount={betAmount}
+      targetPayoutAmount={targetPayoutAmount}
+      onBetAmountChange={handleBetAmountChange}
+      gameResult={gameResult}
+      betStatus={betStatus}
+      connectWallletBtn={
+        <Wallet>
+          <ConnectWallet
+            className={cn(
+              "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-semibold ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
+              "bg-neutral-background",
+              "rounded-[12px]",
+              "border border-border-stroke",
+              "px-3 py-1.5 h-[44px]",
+              "text-primary",
+            )}
+            disconnectedLabel="Connect"
+          >
+            <div className="flex items-center">
+              <Avatar
+                className="h-7 w-7 mr-2"
+                address="0x838aD0EAE54F99F1926dA7C3b6bFbF617389B4D9"
+              />
+              <Name className="text-title-color" />
+            </div>
+          </ConnectWallet>
+        </Wallet>
+      }
+      gameControls={
+        <DiceGameControls
+          selectedNumber={selectedNumber}
+          onNumberChange={handleNumberChange}
+          multiplier={1.94}
+          isDisabled={isControlsDisabled}
+        />
+      }
+    />
+  )
+}
diff --git a/examples/mini-app/src/components/game/DiceGameControls.stories.tsx b/examples/mini-app/src/components/game/DiceGameControls.stories.tsx
new file mode 100644
index 0000000..ee9c91e
--- /dev/null
+++ b/examples/mini-app/src/components/game/DiceGameControls.stories.tsx
@@ -0,0 +1,169 @@
+import type { Meta, StoryObj } from "@storybook/react"
+import { fn } from "@storybook/test"
+import { useState } from "react"
+import { DiceGameControls } from "./DiceGameControls"
+
+const meta = {
+  title: "Game/DiceGameControls",
+  component: DiceGameControls,
+  parameters: {
+    layout: "centered",
+    backgrounds: {
+      default: "dark",
+      values: [
+        { name: "light", value: "#FFFFFF" },
+        { name: "dark", value: "#1a1a1a" },
+        { name: "game", value: "#0a0a0a" },
+      ],
+    },
+  },
+  tags: ["autodocs"],
+  argTypes: {
+    selectedNumber: {
+      control: { type: "number", min: 1, max: 99, step: 1 },
+      description: "The currently selected number on the slider",
+      table: {
+        type: { summary: "number" },
+        defaultValue: { summary: "50" },
+      },
+    },
+    multiplier: {
+      control: { type: "number", min: 1, max: 10, step: 0.01 },
+      description: "The multiplier value displayed above the slider",
+      table: {
+        type: { summary: "number" },
+        defaultValue: { summary: "1.94" },
+      },
+    },
+    isDisabled: {
+      control: "boolean",
+      description: "Whether the slider is disabled",
+      table: {
+        type: { summary: "boolean" },
+        defaultValue: { summary: "false" },
+      },
+    },
+    onNumberChange: {
+      description: "Callback function called when the slider value changes",
+      table: {
+        type: { summary: "(value: number) => void" },
+      },
+    },
+  },
+  args: {
+    selectedNumber: 50,
+    multiplier: 1.94,
+    isDisabled: false,
+    onNumberChange: fn(),
+  },
+  decorators: [
+    (Story) => (
+      <div className="relative w-[400px] h-[200px] bg-gradient-to-b from-green-900 to-blue-900 rounded-lg overflow-hidden">
+        <Story />
+      </div>
+    ),
+  ],
+} satisfies Meta<typeof DiceGameControls>
+
+export default meta
+type Story = StoryObj<typeof meta>
+
+function InteractiveDiceGameControls({
+  initialSelectedNumber = 50,
+  multiplier = 1.94,
+  isDisabled = false,
+}: {
+  initialSelectedNumber?: number
+  multiplier?: number
+  isDisabled?: boolean
+}) {
+  const [selectedNumber, setSelectedNumber] = useState(initialSelectedNumber)
+
+  const handleNumberChange = (value: number) => {
+    setSelectedNumber(value)
+  }
+
+  return (
+    <div className="relative w-[400px] h-[200px] bg-gradient-to-b from-green-900 to-blue-900 rounded-lg overflow-hidden">
+      <DiceGameControls
+        selectedNumber={selectedNumber}
+        onNumberChange={handleNumberChange}
+        multiplier={multiplier}
+        isDisabled={isDisabled}
+      />
+    </div>
+  )
+}
+
+export const Default: Story = {
+  name: "Default (50)",
+  args: {},
+}
+
+export const MinimumValue: Story = {
+  name: "Minimum Value (1)",
+  args: {
+    selectedNumber: 1,
+  },
+}
+
+export const LowValue: Story = {
+  name: "Low Value (25)",
+  args: {
+    selectedNumber: 25,
+  },
+}
+
+export const HighValue: Story = {
+  name: "High Value (75)",
+  args: {
+    selectedNumber: 75,
+  },
+}
+
+export const MaximumValue: Story = {
+  name: "Maximum Value (99)",
+  args: {
+    selectedNumber: 99,
+  },
+}
+
+export const DisabledLow: Story = {
+  name: "Disabled (Low Value)",
+  args: {
+    selectedNumber: 20,
+    isDisabled: true,
+  },
+}
+
+export const DisabledHigh: Story = {
+  name: "Disabled (High Value)",
+  args: {
+    selectedNumber: 80,
+    isDisabled: true,
+  },
+}
+
+export const Interactive: Story = {
+  name: "Interactive",
+  render: (args) => (
+    <InteractiveDiceGameControls
+      initialSelectedNumber={args.selectedNumber}
+      multiplier={args.multiplier}
+      isDisabled={args.isDisabled}
+    />
+  ),
+  args: {
+    selectedNumber: 65,
+    multiplier: 2.5,
+    isDisabled: false,
+  },
+  parameters: {
+    docs: {
+      description: {
+        story:
+          "Move the slider to change the selected number. The component state updates in real-time as you drag the slider.",
+      },
+    },
+  },
+}
diff --git a/examples/mini-app/src/components/game/DiceGameControls.tsx b/examples/mini-app/src/components/game/DiceGameControls.tsx
new file mode 100644
index 0000000..629c465
--- /dev/null
+++ b/examples/mini-app/src/components/game/DiceGameControls.tsx
@@ -0,0 +1,47 @@
+import { Slider } from "../ui/slider"
+
+interface DiceGameControlsProps {
+  selectedNumber: number
+  onNumberChange: (value: number) => void
+  multiplier: number
+  isDisabled: boolean
+}
+
+export function DiceGameControls({
+  selectedNumber,
+  onNumberChange,
+  multiplier,
+  isDisabled,
+}: DiceGameControlsProps) {
+  const handleSliderChange = (values: number[]) => {
+    onNumberChange(values[0])
+  }
+
+  return (
+    <>
+      <div className="absolute top-1/5 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-[26px] font-extrabold leading-[34px] text-white">
+        {multiplier.toFixed(2)} x
+      </div>
+      <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 mt-2 w-full max-w-md flex flex-col items-center">
+        <div className="bg-white/80 rounded-md p-2 h-[40px] w-[188px] flex items-center">
+          <Slider
+            value={[selectedNumber]}
+            onValueChange={handleSliderChange}
+            min={1}
+            max={99}
+            step={1}
+            disabled={isDisabled}
+            className="w-[172px] h-[8px]"
+          />
+        </div>
+        <div className="flex justify-between items-center text-[12px] text-[#E5E7EB]/80 w-[188px] h-[20px] pl-3 pr-2">
+          <span>1</span>
+          <span>25</span>
+          <span>50</span>
+          <span>75</span>
+          <span>99</span>
+        </div>
+      </div>
+    </>
+  )
+}
diff --git a/examples/mini-app/src/components/game/GameFrame.stories.tsx b/examples/mini-app/src/components/game/GameFrame.stories.tsx
index 02eb46a..1efda68 100644
--- a/examples/mini-app/src/components/game/GameFrame.stories.tsx
+++ b/examples/mini-app/src/components/game/GameFrame.stories.tsx
@@ -1,22 +1,32 @@
-import { COINTOSS_FACE } from "@betswirl/sdk-core"
-import { TokenImage } from "@coinbase/onchainkit/token"
 import type { Meta, StoryObj } from "@storybook/react"
-import { parseUnits } from "viem"
-import gameBg from "../../assets/game/game-background.png"
-import { ETH_TOKEN } from "../../lib/tokens"
 import { GameFrame } from "./GameFrame"
+import { TokenImage } from "@coinbase/onchainkit/token"
+import { ETH_TOKEN } from "../../lib/tokens"
 import { type HistoryEntry } from "./HistorySheetPanel"
+import gameBg from "../../assets/game/game-background.png"
+import { COINTOSS_FACE } from "@betswirl/sdk-core"
+import type { ComponentProps } from "react"

-declare global {
-  interface BigInt {
-    toJSON(): string
-  }
-}
+type GameFrameProps = ComponentProps<typeof GameFrame>

-BigInt.prototype.toJSON = function () {
-  return this.toString()
+type StoryArgs = Omit<
+  GameFrameProps,
+  "balance" | "betAmount" | "targetPayoutAmount" | "gameResult"
+> & {
+  balance: string
+  betAmount: string | undefined
+  targetPayoutAmount: string
+  gameResult:
+    | (Omit<NonNullable<GameFrameProps["gameResult"]>, "payout"> & {
+        payout: string
+      })
+    | null
 }

+const MOCK_BALANCE = "1123456000000000000" // 1.123456 ETH
+const MOCK_BET_AMOUNT = "123456700000000000" // 0.1234567 ETH
+const MOCK_TARGET_PAYOUT = "239505998000000000" // 0.239505998 ETH
+
 const meta = {
   title: "Game/GameFrame",
   component: GameFrame,
@@ -34,9 +44,9 @@ const meta = {
 } satisfies Meta<typeof GameFrame>

 export default meta
-type Story = StoryObj<typeof meta>
+type Story = StoryObj<StoryArgs>

-const connectWalletBtnStub = <div />
+const connectWalletBtnStub = <div></div>

 const mockHistoryData: HistoryEntry[] = [
   {
@@ -44,7 +54,7 @@ const mockHistoryData: HistoryEntry[] = [
     status: "Won bet",
     multiplier: 1.94,
     payoutAmount: "1.94675",
-    payoutCurrencyIcon: <TokenImage token={ETH_TOKEN} size={18} />,
+    payoutCurrencyIcon: <TokenImage token={ETH_TOKEN} size={14} />,
     timestamp: "~24h ago",
   },
   {
@@ -52,7 +62,7 @@ const mockHistoryData: HistoryEntry[] = [
     status: "Won bet",
     multiplier: 1.2,
     payoutAmount: 0.2,
-    payoutCurrencyIcon: <TokenImage token={ETH_TOKEN} size={18} />,
+    payoutCurrencyIcon: <TokenImage token={ETH_TOKEN} size={14} />,
     timestamp: "~2h ago",
   },
   {
@@ -60,7 +70,7 @@ const mockHistoryData: HistoryEntry[] = [
     status: "Busted",
     multiplier: 1.94,
     payoutAmount: 1.94,
-    payoutCurrencyIcon: <TokenImage token={ETH_TOKEN} size={18} />,
+    payoutCurrencyIcon: <TokenImage token={ETH_TOKEN} size={14} />,
     timestamp: "~2h ago",
   },
   {
@@ -68,7 +78,7 @@ const mockHistoryData: HistoryEntry[] = [
     status: "Won bet",
     multiplier: 1.946,
     payoutAmount: 2.453,
-    payoutCurrencyIcon: <TokenImage token={ETH_TOKEN} size={18} />,
+    payoutCurrencyIcon: <TokenImage token={ETH_TOKEN} size={14} />,
     timestamp: "~2h ago",
   },
   {
@@ -76,7 +86,7 @@ const mockHistoryData: HistoryEntry[] = [
     status: "Busted",
     multiplier: 1.94,
     payoutAmount: 1.94,
-    payoutCurrencyIcon: <TokenImage token={ETH_TOKEN} size={18} />,
+    payoutCurrencyIcon: <TokenImage token={ETH_TOKEN} size={14} />,
     timestamp: "~2h ago",
   },
   {
@@ -84,7 +94,7 @@ const mockHistoryData: HistoryEntry[] = [
     status: "Won bet",
     multiplier: 1.946,
     payoutAmount: 2.453,
-    payoutCurrencyIcon: <TokenImage token={ETH_TOKEN} size={18} />,
+    payoutCurrencyIcon: <TokenImage token={ETH_TOKEN} size={14} />,
     timestamp: "~2h ago",
   },
   {
@@ -92,7 +102,7 @@ const mockHistoryData: HistoryEntry[] = [
     status: "Won bet",
     multiplier: 1.94,
     payoutAmount: 0.1,
-    payoutCurrencyIcon: <TokenImage token={ETH_TOKEN} size={18} />,
+    payoutCurrencyIcon: <TokenImage token={ETH_TOKEN} size={14} />,
     timestamp: "~2h ago",
   },
   {
@@ -100,7 +110,7 @@ const mockHistoryData: HistoryEntry[] = [
     status: "Won bet",
     multiplier: 1.94,
     payoutAmount: 0.1,
-    payoutCurrencyIcon: <TokenImage token={ETH_TOKEN} size={18} />,
+    payoutCurrencyIcon: <TokenImage token={ETH_TOKEN} size={14} />,
     timestamp: "~2h ago",
   },
   {
@@ -108,7 +118,7 @@ const mockHistoryData: HistoryEntry[] = [
     status: "Won bet",
     multiplier: 1.94,
     payoutAmount: 0.1,
-    payoutCurrencyIcon: <TokenImage token={ETH_TOKEN} size={18} />,
+    payoutCurrencyIcon: <TokenImage token={ETH_TOKEN} size={14} />,
     timestamp: "~2h ago",
   },
 ]
@@ -119,22 +129,36 @@ const Template: Story = {
       backgroundImage: gameBg,
     },
     historyData: mockHistoryData,
-    balance: 1123456n * 10n ** 12n,
+    balance: MOCK_BALANCE,
     connectWallletBtn: connectWalletBtnStub,
     isConnected: false,
-    onPlayBtnClick: (selectedSide: COINTOSS_FACE) => console.log("selectedSide: ", selectedSide),
+    onPlayBtnClick: () => console.log("onPlayBtnClick"),
     tokenDecimals: 18,
     gameResult: null,
     betStatus: null,
-    onHistoryOpen: () => console.log("onHistoryOpen"),
-    betAmount: parseUnits("0.1234567", 18),
-    setBetAmount: (betAmount?: bigint) => console.log("betAmount: ", betAmount),
-    targetPayoutAmount: (parseUnits("0.1234567", 18) * 194n) / 100n,
-    onHalfBet: () => console.log("onHalfBet"),
-    onDoubleBet: () => console.log("onDoubleBet"),
-    onMaxBet: () => console.log("onMaxBet"),
-  },
-  render: (args) => <GameFrame {...args} />,
+    betAmount: MOCK_BET_AMOUNT,
+    targetPayoutAmount: MOCK_TARGET_PAYOUT,
+    onBetAmountChange: (amount: bigint | undefined) =>
+      console.log("onBetAmountChange: ", amount?.toString()),
+  },
+  render: (args) => {
+    const gameResult = args.gameResult
+      ? ({
+          ...args.gameResult,
+          payout: BigInt(args.gameResult.payout),
+        } as GameFrameProps["gameResult"])
+      : null
+
+    return (
+      <GameFrame
+        {...args}
+        balance={BigInt(args.balance)}
+        betAmount={args.betAmount ? BigInt(args.betAmount) : undefined}
+        targetPayoutAmount={BigInt(args.targetPayoutAmount)}
+        gameResult={gameResult}
+      />
+    )
+  },
 }

 export const WalletNotConnected: Story = {
@@ -173,7 +197,7 @@ export const Win: Story = {
     betStatus: "success",
     gameResult: {
       isWin: true,
-      payout: (parseUnits("0.1234567", 18) * 194n) / 100n,
+      payout: MOCK_TARGET_PAYOUT,
       currency: "ETH",
       rolled: COINTOSS_FACE.HEADS,
     },
@@ -187,7 +211,7 @@ export const Loss: Story = {
     betStatus: "success",
     gameResult: {
       isWin: false,
-      payout: (parseUnits("0.1234567", 18) * 194n) / 100n,
+      payout: MOCK_TARGET_PAYOUT,
       currency: "ETH",
       rolled: COINTOSS_FACE.TAILS,
     },
diff --git a/examples/mini-app/src/components/game/GameFrame.tsx b/examples/mini-app/src/components/game/GameFrame.tsx
index e27d95c..6a36d31 100644
--- a/examples/mini-app/src/components/game/GameFrame.tsx
+++ b/examples/mini-app/src/components/game/GameFrame.tsx
@@ -1,24 +1,15 @@
-import { COINTOSS_FACE, FORMAT_TYPE, formatRawAmount } from "@betswirl/sdk-core"
-import Decimal from "decimal.js"
 import { History, Info } from "lucide-react"
-import React, { ChangeEvent, useEffect, useRef, useState } from "react"
-import { parseUnits } from "viem"
-import coinHeadsIcon from "../../assets/game/coin-heads.svg"
-import coinTailsIcon from "../../assets/game/coin-tails.svg"
+import React, { useEffect, useRef, useState } from "react"
 import { cn } from "../../lib/utils"
+import { formatRawAmount } from "@betswirl/sdk-core"
 import { Button } from "../ui/button"
 import { Card, CardContent, CardHeader, CardTitle } from "../ui/card"
-import { Input } from "../ui/input"
-import { Label } from "../ui/label"
-
-import { TokenImage } from "@coinbase/onchainkit/token"
-
-import { ETH_TOKEN } from "../../lib/tokens"
-import { BetStatus, GameResult } from "../../types"
 import { Sheet, SheetTrigger } from "../ui/sheet"
-import { GameResultWindow } from "./GameResultWindow"
 import { HistoryEntry, HistorySheetPanel } from "./HistorySheetPanel"
 import { InfoSheetPanel } from "./InfoSheetPanel"
+import { GameResultWindow } from "./GameResultWindow"
+import { BettingPanel } from "./BettingPanel"
+import { BetStatus, CoinTossResult, DiceResult } from "../../types"

 interface IThemeSettings {
   theme?: "light" | "dark" | "system"
@@ -36,48 +27,34 @@ interface GameFrameProps extends React.HTMLAttributes<HTMLDivElement> {
   balance: bigint
   connectWallletBtn: React.ReactNode
   isConnected: boolean
-  onPlayBtnClick: (selectedSide: COINTOSS_FACE) => void
   tokenDecimals: number
-  gameResult: GameResult | null
+  gameResult: CoinTossResult | DiceResult | null
   betStatus: BetStatus | null
-  onHistoryOpen: () => void
   betAmount: bigint | undefined
-  setBetAmount: (amount: bigint | undefined) => void
   targetPayoutAmount: bigint
-  onHalfBet: () => void
-  onDoubleBet: () => void
-  onMaxBet: () => void
+  onBetAmountChange: (amount: bigint | undefined) => void
+  onPlayBtnClick: () => void
+  gameControls?: React.ReactNode
 }

-const STEP = 0.0001
-
 export function GameFrame({
   themeSettings,
   historyData,
   balance,
   connectWallletBtn,
   isConnected,
-  onPlayBtnClick,
   tokenDecimals,
   gameResult,
   betStatus,
-  onHistoryOpen,
   betAmount,
-  setBetAmount,
   targetPayoutAmount,
-  onHalfBet,
-  onDoubleBet,
-  onMaxBet,
+  onBetAmountChange,
+  onPlayBtnClick,
+  gameControls,
   ...props
 }: GameFrameProps) {
-  const [betAmountError, setBetAmountError] = useState<string | null>(null)
-  const [inputValue, setInputValue] = useState<string>("")
-  const [isValidInput, setIsValidInput] = useState<boolean>(true)
-  const [isUserTyping, setIsUserTyping] = useState<boolean>(false)
-  const typingTimeoutRef = useRef<NodeJS.Timeout | null>(null)
   const [isInfoSheetOpen, setIsInfoSheetOpen] = useState(false)
   const [isHistorySheetOpen, setIsHistorySheetOpen] = useState(false)
-  const [selectedSide, setSelectedSide] = useState<COINTOSS_FACE>(COINTOSS_FACE.HEADS)
   const cardRef = useRef<HTMLDivElement>(null)
   const [isMounted, setIsMounted] = useState(false)
   const { theme } = themeSettings
@@ -86,103 +63,33 @@ export function GameFrame({

   useEffect(() => {
     setIsMounted(true)
-
-    // Cleanup timeout on unmount
-    return () => {
-      if (typingTimeoutRef.current) {
-        clearTimeout(typingTimeoutRef.current)
-      }
-    }
   }, [])

-  // Sync inputValue with external betAmount changes from buttons (but not when user is typing)
-  useEffect(() => {
-    if (isUserTyping) return
-
-    if (betAmount === undefined) {
-      setInputValue("")
-      setIsValidInput(true)
-    } else {
-      const formatted = formatRawAmount(betAmount, tokenDecimals, FORMAT_TYPE.PRECISE)
-      setInputValue(formatted)
-      setIsValidInput(true)
-    }
-  }, [betAmount, tokenDecimals, isUserTyping])
-
-  const isBetAmountValid = betAmount && betAmount > 0n
-
-  const multiplier = 1.94
   const winChance = 50
   const targetPayout = formatRawAmount(targetPayoutAmount, tokenDecimals)
   const fee = 0

-  const formattedBalance = formatRawAmount(balance, tokenDecimals)
-
-  const isInGameResultState = !!gameResult
-  const isBettingInProgress = betStatus === "pending"
-  const canInitiateBet = isConnected && isBetAmountValid && !isBettingInProgress
-
-  const isErrorState = betStatus === "error"
-
-  const isPlayButtonDisabled: boolean = isErrorState
-    ? false
-    : isInGameResultState
-      ? false
-      : !canInitiateBet
-
-  let playButtonText: string
-  if (isErrorState) {
-    playButtonText = "Error, try again"
-  } else if (isInGameResultState) {
-    playButtonText = "Try again"
-  } else if (isBettingInProgress) {
-    playButtonText = "Placing Bet..."
-  } else if (!isConnected) {
-    playButtonText = "Connect Wallet"
-  } else {
-    playButtonText = "Place Bet"
-  }
-
-  const handlePlayBtnClick = () => {
-    if (isInGameResultState) {
-      setBetAmount(0n)
-      setInputValue("")
-      setSelectedSide(COINTOSS_FACE.HEADS)
-    }
-    onPlayBtnClick(selectedSide)
-  }
-
-  const handleCoinClick = () => {
-    if (!isConnected || betStatus === "pending" || !!gameResult) {
-      return
-    }
-    setSelectedSide((prevSide) =>
-      prevSide === COINTOSS_FACE.HEADS ? COINTOSS_FACE.TAILS : COINTOSS_FACE.HEADS,
-    )
-  }
-
-  const handleHistoryOpen = (open: boolean) => {
-    if (open) {
-      onHistoryOpen()
-    }
-    setIsHistorySheetOpen(open)
-  }
-
-  const currentCoinIcon = selectedSide === COINTOSS_FACE.HEADS ? coinHeadsIcon : coinTailsIcon
-  const isCoinClickable = isConnected && betStatus !== "pending" && !gameResult
-
   return (
     <div
-      className={cn("cointoss-game-wrapper game-global-styles", themeClass, props.className)}
+      className={cn(
+        "cointoss-game-wrapper game-global-styles",
+        themeClass,
+        props.className,
+      )}
       style={themeSettings.customTheme as React.CSSProperties}
       {...props}
     >
       <Card
         ref={cardRef}
-        className={cn("relative overflow-hidden", "bg-card text-card-foreground border")}
+        className={cn(
+          "relative overflow-hidden",
+          "bg-card text-card-foreground border",
+        )}
       >
         <CardHeader className="flex flex-row justify-between items-center h-[44px]">
-          <CardTitle className="text-lg text-title-color font-bold">CoinToss</CardTitle>
+          <CardTitle className="text-lg text-title-color font-bold">
+            CoinToss
+          </CardTitle>
           {connectWallletBtn}
         </CardHeader>

@@ -196,7 +103,12 @@ export function GameFrame({
               backgroundImage: `url(${themeSettings.backgroundImage})`,
             }}
           >
-            <div className={cn("absolute inset-0 rounded-[16px]", "bg-game-window-overlay")} />
+            <div
+              className={cn(
+                "absolute inset-0 rounded-[16px]",
+                "bg-game-window-overlay",
+              )}
+            ></div>

             <Sheet open={isInfoSheetOpen} onOpenChange={setIsInfoSheetOpen}>
               <SheetTrigger asChild>
@@ -223,7 +135,10 @@ export function GameFrame({
               )}
             </Sheet>

-            <Sheet open={isHistorySheetOpen} onOpenChange={handleHistoryOpen}>
+            <Sheet
+              open={isHistorySheetOpen}
+              onOpenChange={setIsHistorySheetOpen}
+            >
               <SheetTrigger asChild>
                 <Button
                   variant="iconTransparent"
@@ -238,155 +153,33 @@ export function GameFrame({
                 </Button>
               </SheetTrigger>
               {isMounted && cardRef.current && (
-                <HistorySheetPanel portalContainer={cardRef.current} historyData={historyData} />
+                <HistorySheetPanel
+                  portalContainer={cardRef.current}
+                  historyData={historyData}
+                />
               )}
             </Sheet>

-            <div className="absolute top-1/5 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-[26px] font-extrabold leading-[34px] text-white">
-              {multiplier.toFixed(2)} x
-            </div>
-            <Button
-              variant="coinButton"
-              size="coin"
-              onClick={handleCoinClick}
-              disabled={!isCoinClickable}
-              aria-label={`Select ${selectedSide === COINTOSS_FACE.HEADS ? "Tails" : "Heads"} side`}
-              className="absolute top-[62px] left-1/2 transform -translate-x-1/2 mt-2"
-            >
-              <img
-                src={currentCoinIcon}
-                alt={selectedSide === COINTOSS_FACE.HEADS ? "Heads" : "Tails"}
-                className="h-full w-auto pointer-events-none"
-              />
-            </Button>
+            {gameControls}
             <GameResultWindow
               isVisible={!!gameResult}
               isWin={gameResult?.isWin}
               amount={betAmount || 0n}
               payout={gameResult?.payout}
               currency="ETH"
-              rolled={gameResult?.rolled || ""}
+              rolled={gameResult?.rolled.toString() || ""}
             />
           </div>

-          <div className="bg-control-panel-background p-4 rounded-[16px] flex flex-col gap-4">
-            <div className="flex flex-col gap-3">
-              <div className="text-sm font-medium flex items-center">
-                <span className="text-text-on-surface-variant">Balance:&nbsp;</span>
-                <span className="font-semibold">{formattedBalance}</span>
-                <TokenImage token={ETH_TOKEN} size={18} className="ml-1" />
-              </div>
-
-              <Label
-                htmlFor="betAmount"
-                className="text-sm font-medium -mb-1 text-text-on-surface-variant"
-              >
-                Bet amount
-              </Label>
-              <Input
-                id="betAmount"
-                type="number"
-                placeholder="0"
-                min={0}
-                // Note: The real maximum is set by CoinTossGame and operates on the balance amount in bigint.
-                // Converting formattedBalance to a float here may lose precision for large values;
-                // however, a bigint-compatible approach is not required here because the actual maximum, if enforced,
-                // is handled by CoinTossGame using the balance amount as bigint.
-                max={Number.parseFloat(formattedBalance)}
-                step={STEP}
-                value={inputValue}
-                onChange={(e: ChangeEvent<HTMLInputElement>) => {
-                  const newInputValue = e.target.value
-                  setInputValue(newInputValue)
-                  setIsUserTyping(true)
-
-                  // Clear existing timeout
-                  if (typingTimeoutRef.current) {
-                    clearTimeout(typingTimeoutRef.current)
-                  }
-
-                  // Set new timeout to stop typing state after 1 second
-                  typingTimeoutRef.current = setTimeout(() => {
-                    setIsUserTyping(false)
-                  }, 1000)
-
-                  if (newInputValue === "") {
-                    setBetAmount(undefined)
-                    setIsValidInput(true)
-                    setBetAmountError(null)
-                    return
-                  }
-
-                  try {
-                    new Decimal(newInputValue)
-
-                    try {
-                      const weiValue = parseUnits(newInputValue, tokenDecimals)
-                      setBetAmount(weiValue)
-                      setIsValidInput(true)
-                      setBetAmountError(null)
-                    } catch {
-                      setIsValidInput(false)
-                      setBetAmountError(null)
-                    }
-                  } catch {
-                    setIsValidInput(false)
-                    setBetAmountError(null)
-                  }
-                }}
-                className={cn("relative", !isValidInput && "[&_input]:text-muted-foreground")}
-                token={{
-                  icon: <TokenImage token={ETH_TOKEN} size={18} />,
-                  symbol: "ETH",
-                }}
-                disabled={!isConnected || betStatus === "pending" || !!gameResult}
-              />
-              {betAmountError && <div className="text-red-500 text-xs mt-1">{betAmountError}</div>}
-
-              <div className="grid grid-cols-3 gap-2">
-                <Button
-                  variant="secondary"
-                  onClick={onHalfBet}
-                  className="border border-border-stroke rounded-[8px] h-[30px] w-[85.33px] text-text-on-surface"
-                  disabled={!isConnected || isBettingInProgress || isInGameResultState}
-                >
-                  1/2
-                </Button>
-                <Button
-                  variant="secondary"
-                  onClick={onDoubleBet}
-                  className="border border-border-stroke rounded-[8px] h-[30px] w-[85.33px] text-text-on-surface"
-                  disabled={!isConnected || isBettingInProgress || isInGameResultState}
-                >
-                  2x
-                </Button>
-                <Button
-                  variant="secondary"
-                  className="border border-border-stroke rounded-[8px] h-[30px] w-[85.33px] text-text-on-surface"
-                  onClick={onMaxBet}
-                  disabled={!isConnected || isBettingInProgress || isInGameResultState}
-                >
-                  Max
-                </Button>
-              </div>
-            </div>
-
-            <Button
-              size="lg"
-              className={cn(
-                "w-full",
-                "border-0",
-                "font-bold",
-                "rounded-[16px]",
-                "text-play-btn-font",
-              )}
-              variant={isErrorState ? "destructive" : "default"}
-              onClick={handlePlayBtnClick}
-              disabled={isPlayButtonDisabled}
-            >
-              {playButtonText}
-            </Button>
-          </div>
+          <BettingPanel
+            balance={balance}
+            isConnected={isConnected}
+            tokenDecimals={tokenDecimals}
+            betStatus={betStatus}
+            betAmount={betAmount}
+            onBetAmountChange={onBetAmountChange}
+            onPlayBtnClick={onPlayBtnClick}
+          />
         </CardContent>
       </Card>
     </div>
diff --git a/examples/mini-app/src/components/game/GameResultWindow.stories.tsx b/examples/mini-app/src/components/game/GameResultWindow.stories.tsx
index 78ccc64..3df8e5c 100644
--- a/examples/mini-app/src/components/game/GameResultWindow.stories.tsx
+++ b/examples/mini-app/src/components/game/GameResultWindow.stories.tsx
@@ -1,6 +1,6 @@
 import type { Meta, StoryObj } from "@storybook/react"
-import { parseUnits } from "viem"
 import { GameResultWindow } from "./GameResultWindow"
+import { parseUnits } from "viem"

 const meta = {
   title: "Game/GameResultWindow",
@@ -58,7 +58,7 @@ export const WinLight: Story = {
     ...Template.args,
     isVisible: true,
     isWin: true,
-    payout: (parseUnits("1.1234567", 18) * 194n) / 100n,
+    payout: parseUnits("1.1234567", 18) * 194n / 100n,
   },
   render: (args) => (
     <div className="light">
@@ -96,7 +96,7 @@ export const WinDark: Story = {
     ...Template.args,
     isVisible: true,
     isWin: true,
-    payout: (parseUnits("1.1234567", 18) * 194n) / 100n,
+    payout: parseUnits("1.1234567", 18) * 194n / 100n,
   },
   render: (args) => (
     <div className="dark">
diff --git a/examples/mini-app/src/components/game/GameResultWindow.tsx b/examples/mini-app/src/components/game/GameResultWindow.tsx
index 1bd88db..9bfc44e 100644
--- a/examples/mini-app/src/components/game/GameResultWindow.tsx
+++ b/examples/mini-app/src/components/game/GameResultWindow.tsx
@@ -1,9 +1,9 @@
-import { FORMAT_TYPE, formatRawAmount } from "@betswirl/sdk-core"
-import { useEffect } from "react"
-import lossBgWebp from "../../assets/game/game-result/loss-bg.webp"
+import winIcon from "../../assets/game/game-result/win-icon.svg"
 import lossIcon from "../../assets/game/game-result/loss-icon.svg"
 import winBgWebp from "../../assets/game/game-result/win-bg.webp"
-import winIcon from "../../assets/game/game-result/win-icon.svg"
+import lossBgWebp from "../../assets/game/game-result/loss-bg.webp"
+import { useEffect } from "react"
+import { FORMAT_TYPE, formatRawAmount } from "@betswirl/sdk-core"

 const images = {
   win: {
@@ -45,10 +45,10 @@ export function GameResultWindow({
       img.src = imgSrc
     }

-    for (const { bg, icon } of Object.values(images)) {
+    Object.values(images).forEach(({ bg, icon }) => {
       preloadImg(bg)
       preloadImg(icon)
-    }
+    })
   }, [])

   if (!isVisible) {
@@ -70,7 +70,11 @@ export function GameResultWindow({

       <div className="flex flex-col items-center gap-[8px] text-center relative">
         <div className="w-[48px] h-[44px] flex items-center justify-center bg-game-result-icon-bg relative rounded-[6px]">
-          <img className="absolute" src={currentImages.icon} alt={`${resultType} icon`} />
+          <img
+            className="absolute"
+            src={currentImages.icon}
+            alt={`${resultType} icon`}
+          />
         </div>
         <p className="text-[16px] leading-[150%] font-bold">
           {sign}
@@ -81,7 +85,9 @@ export function GameResultWindow({
           Payout: {formattedPayout}
           <span className="uppercase"> {currency}</span>
         </p>
-        <p className="text-[12px] leading-[167%] font-medium uppercase">Draw: {rolled}</p>
+        <p className="text-[12px] leading-[167%] font-medium uppercase">
+          Draw: {rolled}
+        </p>
       </div>
     </div>
   )
diff --git a/examples/mini-app/src/components/game/HistorySheetPanel.stories.tsx b/examples/mini-app/src/components/game/HistorySheetPanel.stories.tsx
index 8ed45ac..3c32df9 100644
--- a/examples/mini-app/src/components/game/HistorySheetPanel.stories.tsx
+++ b/examples/mini-app/src/components/game/HistorySheetPanel.stories.tsx
@@ -1,19 +1,22 @@
-import { TokenImage } from "@coinbase/onchainkit/token"
 import type { Meta, StoryObj } from "@storybook/react"
 import { History as HistoryIcon } from "lucide-react"
 import React, { useState, useEffect, useRef } from "react"
-import { ETH_TOKEN } from "../../lib/tokens"
 import { cn } from "../../lib/utils"
 import { Button } from "../ui/button"
 import { Sheet, SheetTrigger } from "../ui/sheet"
 import { type HistoryEntry, HistorySheetPanel } from "./HistorySheetPanel"
+import { TokenImage } from "@coinbase/onchainkit/token"
+import { ETH_TOKEN } from "../../lib/tokens"

 interface PanelStoryWrapperProps {
   children: (container: HTMLDivElement) => React.ReactNode
   theme?: "light" | "dark" | "system"
 }

-const PanelStoryWrapper: React.FC<PanelStoryWrapperProps> = ({ children, theme = "system" }) => {
+const PanelStoryWrapper: React.FC<PanelStoryWrapperProps> = ({
+  children,
+  theme = "system",
+}) => {
   const containerRef = useRef<HTMLDivElement>(null)
   const [isMounted, setIsMounted] = useState(false)

@@ -38,7 +41,8 @@ const PanelStoryWrapper: React.FC<PanelStoryWrapperProps> = ({ children, theme =
         <p>Preparing story...</p>
       )}
       <p className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 text-muted-foreground text-center">
-        This is a mock card container. <br /> Click the button to open the panel.
+        This is a mock card container. <br /> Click the button to open the
+        panel.
       </p>
     </div>
   )
@@ -50,7 +54,7 @@ const mockHistoryDataDefault: HistoryEntry[] = [
     status: "Won bet",
     multiplier: 1.94,
     payoutAmount: "1.94675",
-    payoutCurrencyIcon: <TokenImage token={ETH_TOKEN} size={18} />,
+    payoutCurrencyIcon: <TokenImage token={ETH_TOKEN} size={14} />,
     timestamp: "~24h ago",
   },
   {
@@ -58,7 +62,7 @@ const mockHistoryDataDefault: HistoryEntry[] = [
     status: "Busted",
     multiplier: 1.2,
     payoutAmount: 0.0,
-    payoutCurrencyIcon: <TokenImage token={ETH_TOKEN} size={18} />,
+    payoutCurrencyIcon: <TokenImage token={ETH_TOKEN} size={14} />,
     timestamp: "~2h ago",
   },
 ]
@@ -70,7 +74,7 @@ const mockHistoryDataExtended: HistoryEntry[] = [
     status: Math.random() > 0.5 ? ("Won bet" as const) : ("Busted" as const),
     multiplier: (Math.random() * 5 + 1).toFixed(2),
     payoutAmount: (Math.random() * 10).toFixed(4),
-    payoutCurrencyIcon: <TokenImage token={ETH_TOKEN} size={18} />,
+    payoutCurrencyIcon: <TokenImage token={ETH_TOKEN} size={14} />,
     timestamp: `~${i * 5 + 10}m ago`,
   })),
 ]
@@ -97,7 +101,10 @@ const HistorySheetWithWrapper = ({
               <HistoryIcon className="h-4 w-4" />
             </Button>
           </SheetTrigger>
-          <HistorySheetPanel portalContainer={portalContainer} historyData={historyData} />
+          <HistorySheetPanel
+            portalContainer={portalContainer}
+            historyData={historyData}
+          />
         </Sheet>
       )}
     </PanelStoryWrapper>
diff --git a/examples/mini-app/src/components/game/HistorySheetPanel.tsx b/examples/mini-app/src/components/game/HistorySheetPanel.tsx
index 23b1586..3e92dec 100644
--- a/examples/mini-app/src/components/game/HistorySheetPanel.tsx
+++ b/examples/mini-app/src/components/game/HistorySheetPanel.tsx
@@ -2,7 +2,14 @@ import React from "react"
 import { cn } from "../../lib/utils"
 import { ScrollArea } from "../ui/scroll-area"
 import { SheetBottomPanelContent, SheetOverlay, SheetPortal } from "../ui/sheet"
-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "../ui/table"
+import {
+  Table,
+  TableBody,
+  TableCell,
+  TableHead,
+  TableHeader,
+  TableRow,
+} from "../ui/table"

 export interface HistoryEntry {
   id: string
@@ -18,14 +25,20 @@ interface HistorySheetPanelProps {
   historyData: HistoryEntry[]
 }

-export function HistorySheetPanel({ portalContainer, historyData }: HistorySheetPanelProps) {
+export function HistorySheetPanel({
+  portalContainer,
+  historyData,
+}: HistorySheetPanelProps) {
   const isEmpty = historyData.length === 0

   return (
     <SheetPortal container={portalContainer}>
       <SheetOverlay className="!absolute !inset-0 !bg-black/60" />
       <SheetBottomPanelContent
-        className={cn(isEmpty ? "!h-auto !max-h-[70%]" : "!h-[70%] !max-h-full", "p-0")}
+        className={cn(
+          isEmpty ? "!h-auto !max-h-[70%]" : "!h-[70%] !max-h-full",
+          "p-0",
+        )}
       >
         <ScrollArea className="h-full w-full rounded-t-[16px] overflow-hidden">
           <div className="p-1 pt-0">
@@ -49,7 +62,10 @@ export function HistorySheetPanel({ portalContainer, historyData }: HistorySheet
               <TableBody>
                 {isEmpty ? (
                   <TableRow className="border-b-0">
-                    <TableCell colSpan={4} className="px-3 py-6 text-left align-top">
+                    <TableCell
+                      colSpan={4}
+                      className="px-3 py-6 text-left align-top"
+                    >
                       <div>
                         <p className="text-base text-card-foreground font-semibold">
                           No bets currently
@@ -69,7 +85,9 @@ export function HistorySheetPanel({ portalContainer, historyData }: HistorySheet
                       <TableCell
                         className={cn(
                           "px-3 py-2.5",
-                          entry.status === "Won bet" ? "text-game-win" : "text-game-loss",
+                          entry.status === "Won bet"
+                            ? "text-game-win"
+                            : "text-game-loss",
                         )}
                       >
                         {entry.status}
diff --git a/examples/mini-app/src/components/game/InfoSheetPanel.stories.tsx b/examples/mini-app/src/components/game/InfoSheetPanel.stories.tsx
index b541d1f..b7fbd4c 100644
--- a/examples/mini-app/src/components/game/InfoSheetPanel.stories.tsx
+++ b/examples/mini-app/src/components/game/InfoSheetPanel.stories.tsx
@@ -11,7 +11,10 @@ interface PanelStoryWrapperProps {
   theme?: "light" | "dark" | "system"
 }

-const PanelStoryWrapper: React.FC<PanelStoryWrapperProps> = ({ children, theme = "system" }) => {
+const PanelStoryWrapper: React.FC<PanelStoryWrapperProps> = ({
+  children,
+  theme = "system",
+}) => {
   const containerRef = useRef<HTMLDivElement>(null)
   const [isMounted, setIsMounted] = useState(false)

@@ -36,7 +39,8 @@ const PanelStoryWrapper: React.FC<PanelStoryWrapperProps> = ({ children, theme =
         <p>Preparing story...</p>
       )}
       <p className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 text-muted-foreground text-center">
-        This is a mock card container. <br /> Click the button to open the panel.
+        This is a mock card container. <br /> Click the button to open the
+        panel.
       </p>
     </div>
   )
diff --git a/examples/mini-app/src/components/game/InfoSheetPanel.tsx b/examples/mini-app/src/components/game/InfoSheetPanel.tsx
index f00fce4..8e56d59 100644
--- a/examples/mini-app/src/components/game/InfoSheetPanel.tsx
+++ b/examples/mini-app/src/components/game/InfoSheetPanel.tsx
@@ -19,7 +19,9 @@ export function InfoSheetPanel({
   return (
     <SheetPortal container={portalContainer}>
       <SheetOverlay className="!absolute !inset-0 !bg-black/60" />
-      <SheetBottomPanelContent className={cn("!h-auto !max-h-[70%]", "p-5 sm:p-6")}>
+      <SheetBottomPanelContent
+        className={cn("!h-auto !max-h-[70%]", "p-5 sm:p-6")}
+      >
         <div className="grid grid-cols-2 gap-x-4 sm:gap-x-6 gap-y-3 sm:gap-y-4 text-sm font-medium text-text-on-surface-variant">
           <div>
             <p>Win chance:</p>
diff --git a/examples/mini-app/src/components/ui/button.stories.tsx b/examples/mini-app/src/components/ui/button.stories.tsx
index c1605ad..d9f3099 100644
--- a/examples/mini-app/src/components/ui/button.stories.tsx
+++ b/examples/mini-app/src/components/ui/button.stories.tsx
@@ -1,7 +1,7 @@
 import type { Meta, StoryObj } from "@storybook/react"
 import { Info } from "lucide-react"
-import coinHeadsIcon from "../../assets/game/coin-heads.svg"
 import { Button } from "./button"
+import coinHeadsIcon from "../../assets/game/coin-heads.svg"

 const meta = {
   title: "UI/Button",
@@ -113,7 +113,11 @@ export const CoinButton: Story = {
     variant: "coinButton",
     size: "coin",
     children: (
-      <img src={coinHeadsIcon} alt="Coin Heads" className="h-full w-auto pointer-events-none" />
+      <img
+        src={coinHeadsIcon}
+        alt="Coin Heads"
+        className="h-full w-auto pointer-events-none"
+      />
     ),
   },
 }
diff --git a/examples/mini-app/src/components/ui/button.tsx b/examples/mini-app/src/components/ui/button.tsx
index 90384c3..1d8328a 100644
--- a/examples/mini-app/src/components/ui/button.tsx
+++ b/examples/mini-app/src/components/ui/button.tsx
@@ -10,12 +10,16 @@ const buttonVariants = cva(
     variants: {
       variant: {
         default: "bg-primary text-primary-foreground hover:bg-primary/90",
-        destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90",
-        outline: "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
-        secondary: "bg-neutral-background text-secondary-foreground hover:bg-secondary/80",
+        destructive:
+          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
+        outline:
+          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
+        secondary:
+          "bg-neutral-background text-secondary-foreground hover:bg-secondary/80",
         ghost: "hover:bg-accent hover:text-accent-foreground",
         link: "text-primary underline-offset-4 hover:underline",
-        iconRound: "bg-secondary text-secondary-foreground hover:bg-secondary/80 rounded-full",
+        iconRound:
+          "bg-secondary text-secondary-foreground hover:bg-secondary/80 rounded-full",
         iconTransparent:
           "bg-secondary/20 text-secondary-foreground hover:bg-secondary/30 rounded-full border border-transparent-button-border",
         coinButton:
@@ -47,7 +51,11 @@ const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
   ({ className, variant, size, asChild = false, ...props }, ref) => {
     const Comp = asChild ? Slot : "button"
     return (
-      <Comp className={cn(buttonVariants({ variant, size, className }))} ref={ref} {...props} />
+      <Comp
+        className={cn(buttonVariants({ variant, size, className }))}
+        ref={ref}
+        {...props}
+      />
     )
   },
 )
diff --git a/examples/mini-app/src/components/ui/card.stories.tsx b/examples/mini-app/src/components/ui/card.stories.tsx
index c41c6c1..47f43af 100644
--- a/examples/mini-app/src/components/ui/card.stories.tsx
+++ b/examples/mini-app/src/components/ui/card.stories.tsx
@@ -1,7 +1,14 @@
 import type { Meta, StoryObj } from "@storybook/react"
 import { BellRing, Check } from "lucide-react"
 import { Button } from "./button"
-import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "./card"
+import {
+  Card,
+  CardContent,
+  CardDescription,
+  CardFooter,
+  CardHeader,
+  CardTitle,
+} from "./card"

 const meta = {
   title: "UI/Card",
@@ -43,8 +50,12 @@ export const ExampleWithContent: Story = {
         <div className=" flex items-center space-x-4 rounded-md border p-4">
           <BellRing />
           <div className="flex-1 space-y-1">
-            <p className="text-sm font-medium leading-none">Push Notifications</p>
-            <p className="text-sm text-muted-foreground">Send notifications to device.</p>
+            <p className="text-sm font-medium leading-none">
+              Push Notifications
+            </p>
+            <p className="text-sm text-muted-foreground">
+              Send notifications to device.
+            </p>
           </div>
         </div>
       </CardContent>
diff --git a/examples/mini-app/src/components/ui/card.tsx b/examples/mini-app/src/components/ui/card.tsx
index 1d316f8..06aef3d 100644
--- a/examples/mini-app/src/components/ui/card.tsx
+++ b/examples/mini-app/src/components/ui/card.tsx
@@ -54,18 +54,37 @@ function CardAction({ className, ...props }: React.ComponentProps<"div">) {
   return (
     <div
       data-slot="card-action"
-      className={cn("col-start-2 row-span-2 row-start-1 self-start justify-self-end", className)}
+      className={cn(
+        "col-start-2 row-span-2 row-start-1 self-start justify-self-end",
+        className,
+      )}
       {...props}
     />
   )
 }

 function CardContent({ className, ...props }: React.ComponentProps<"div">) {
-  return <div data-slot="card-content" className={cn("", className)} {...props} />
+  return (
+    <div data-slot="card-content" className={cn("", className)} {...props} />
+  )
 }

 function CardFooter({ className, ...props }: React.ComponentProps<"div">) {
-  return <div data-slot="card-footer" className={cn("flex items-center", className)} {...props} />
+  return (
+    <div
+      data-slot="card-footer"
+      className={cn("flex items-center", className)}
+      {...props}
+    />
+  )
 }

-export { Card, CardHeader, CardFooter, CardTitle, CardAction, CardDescription, CardContent }
+export {
+  Card,
+  CardHeader,
+  CardFooter,
+  CardTitle,
+  CardAction,
+  CardDescription,
+  CardContent,
+}
diff --git a/examples/mini-app/src/components/ui/input.stories.tsx b/examples/mini-app/src/components/ui/input.stories.tsx
index 79e6219..2173088 100644
--- a/examples/mini-app/src/components/ui/input.stories.tsx
+++ b/examples/mini-app/src/components/ui/input.stories.tsx
@@ -1,5 +1,5 @@
-import { TokenImage } from "@coinbase/onchainkit/token"
 import type { Meta, StoryObj } from "@storybook/react"
+import { TokenImage } from "@coinbase/onchainkit/token"
 import { ETH_TOKEN } from "../../lib/tokens"
 import { Input } from "./input"

@@ -34,7 +34,7 @@ export const Default: Story = {
     placeholder: "0",
     value: "10.5",
     token: {
-      icon: <TokenImage token={ETH_TOKEN} size={18} className="mr-1" />,
+      icon: <TokenImage token={ETH_TOKEN} size={16} className="mr-1" />,
       symbol: "ETH",
     },
   },
@@ -46,7 +46,7 @@ export const Disabled: Story = {
     placeholder: "0",
     value: "10.5",
     token: {
-      icon: <TokenImage token={ETH_TOKEN} size={18} className="mr-1" />,
+      icon: <TokenImage token={ETH_TOKEN} size={16} className="mr-1" />,
       symbol: "ETH",
     },
     disabled: true,
diff --git a/examples/mini-app/src/components/ui/input.tsx b/examples/mini-app/src/components/ui/input.tsx
index 76e8cfe..74f5502 100644
--- a/examples/mini-app/src/components/ui/input.tsx
+++ b/examples/mini-app/src/components/ui/input.tsx
@@ -7,7 +7,8 @@ export interface TokenInfo {
   symbol: string
 }

-export interface InputProps extends Omit<React.InputHTMLAttributes<HTMLInputElement>, "prefix"> {
+export interface InputProps
+  extends Omit<React.InputHTMLAttributes<HTMLInputElement>, "prefix"> {
   token?: TokenInfo
 }

@@ -16,7 +17,12 @@ const Input = React.forwardRef<HTMLInputElement, InputProps>(
     const hasTokenInfo = token && (token.icon || token.symbol)

     return (
-      <div className={cn("relative flex h-12 w-full items-center text-sm", className)}>
+      <div
+        className={cn(
+          "relative flex h-12 w-full items-center text-sm",
+          className,
+        )}
+      >
         <input
           type={type}
           data-slot="input"
diff --git a/examples/mini-app/src/components/ui/label.tsx b/examples/mini-app/src/components/ui/label.tsx
index f331412..cbd30d7 100644
--- a/examples/mini-app/src/components/ui/label.tsx
+++ b/examples/mini-app/src/components/ui/label.tsx
@@ -3,7 +3,10 @@ import * as React from "react"

 import { cn } from "../../lib/utils"

-function Label({ className, ...props }: React.ComponentProps<typeof LabelPrimitive.Root>) {
+function Label({
+  className,
+  ...props
+}: React.ComponentProps<typeof LabelPrimitive.Root>) {
   return (
     <LabelPrimitive.Root
       data-slot="label"
diff --git a/examples/mini-app/src/components/ui/scroll-area.tsx b/examples/mini-app/src/components/ui/scroll-area.tsx
index 3c5a8ec..fbee687 100644
--- a/examples/mini-app/src/components/ui/scroll-area.tsx
+++ b/examples/mini-app/src/components/ui/scroll-area.tsx
@@ -37,8 +37,10 @@ function ScrollBar({
       orientation={orientation}
       className={cn(
         "flex touch-none p-px transition-colors select-none",
-        orientation === "vertical" && "h-full w-2.5 border-l border-l-transparent",
-        orientation === "horizontal" && "h-2.5 flex-col border-t border-t-transparent",
+        orientation === "vertical" &&
+          "h-full w-2.5 border-l border-l-transparent",
+        orientation === "horizontal" &&
+          "h-2.5 flex-col border-t border-t-transparent",
         className,
       )}
       {...props}
diff --git a/examples/mini-app/src/components/ui/sheet.tsx b/examples/mini-app/src/components/ui/sheet.tsx
index ff2bbd3..046dec8 100644
--- a/examples/mini-app/src/components/ui/sheet.tsx
+++ b/examples/mini-app/src/components/ui/sheet.tsx
@@ -8,15 +8,21 @@ function Sheet({ ...props }: React.ComponentProps<typeof SheetPrimitive.Root>) {
   return <SheetPrimitive.Root data-slot="sheet" {...props} />
 }

-function SheetTrigger({ ...props }: React.ComponentProps<typeof SheetPrimitive.Trigger>) {
+function SheetTrigger({
+  ...props
+}: React.ComponentProps<typeof SheetPrimitive.Trigger>) {
   return <SheetPrimitive.Trigger data-slot="sheet-trigger" {...props} />
 }

-function SheetClose({ ...props }: React.ComponentProps<typeof SheetPrimitive.Close>) {
+function SheetClose({
+  ...props
+}: React.ComponentProps<typeof SheetPrimitive.Close>) {
   return <SheetPrimitive.Close data-slot="sheet-close" {...props} />
 }

-function SheetPortal({ ...props }: React.ComponentProps<typeof SheetPrimitive.Portal>) {
+function SheetPortal({
+  ...props
+}: React.ComponentProps<typeof SheetPrimitive.Portal>) {
   return <SheetPrimitive.Portal data-slot="sheet-portal" {...props} />
 }

@@ -93,7 +99,10 @@ function SheetFooter({ className, ...props }: React.ComponentProps<"div">) {
   )
 }

-function SheetTitle({ className, ...props }: React.ComponentProps<typeof SheetPrimitive.Title>) {
+function SheetTitle({
+  className,
+  ...props
+}: React.ComponentProps<typeof SheetPrimitive.Title>) {
   return (
     <SheetPrimitive.Title
       data-slot="sheet-title"
@@ -116,7 +125,9 @@ function SheetDescription({
   )
 }

-type SheetBottomPanelContentProps = React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>
+type SheetBottomPanelContentProps = React.ComponentPropsWithoutRef<
+  typeof SheetPrimitive.Content
+>

 const SheetBottomPanelContent = React.forwardRef<
   React.ComponentRef<typeof SheetPrimitive.Content>,
@@ -133,10 +144,6 @@ const SheetBottomPanelContent = React.forwardRef<
     )}
     {...props}
   >
-    <SheetPrimitive.Title className="sr-only">Panel Content</SheetPrimitive.Title>
-    <SheetPrimitive.Description className="sr-only">
-      Bottom panel content
-    </SheetPrimitive.Description>
     {children}
     <SheetPrimitive.Close
       className={cn(
diff --git a/examples/mini-app/src/components/ui/slider.stories.tsx b/examples/mini-app/src/components/ui/slider.stories.tsx
index f9df7cb..fe2ba6e 100644
--- a/examples/mini-app/src/components/ui/slider.stories.tsx
+++ b/examples/mini-app/src/components/ui/slider.stories.tsx
@@ -34,7 +34,10 @@ const meta = {
 export default meta
 type Story = StoryObj<typeof meta>

-function SliderWithState({ defaultValue, ...args }: React.ComponentProps<typeof Slider>) {
+function SliderWithState({
+  defaultValue,
+  ...args
+}: React.ComponentProps<typeof Slider>) {
   const [value, setValue] = useState(defaultValue || [50])

   return (
diff --git a/examples/mini-app/src/components/ui/slider.tsx b/examples/mini-app/src/components/ui/slider.tsx
index dd79cb3..efb5ccc 100644
--- a/examples/mini-app/src/components/ui/slider.tsx
+++ b/examples/mini-app/src/components/ui/slider.tsx
@@ -1,34 +1,125 @@
 import * as SliderPrimitive from "@radix-ui/react-slider"
 import * as React from "react"
-
 import { cn } from "../../lib/utils"
+import {
+  Tooltip,
+  TooltipContent,
+  TooltipProvider,
+  TooltipTrigger,
+} from "./tooltip"
+
+function getAdjustedPercentage(
+  value: number,
+  min: number,
+  max: number,
+): number {
+  const basePercentage = ((value - min) / (max - min)) * 100
+
+  if (basePercentage <= 5) {
+    return basePercentage + (5 - basePercentage) * 0.3
+  }
+  if (basePercentage >= 95) {
+    return basePercentage - (basePercentage - 95) * 0.3
+  }
+  return basePercentage
+}
+
+function Slider({
+  className,
+  defaultValue,
+  value,
+  min = 0,
+  max = 100,
+  onValueChange,
+  disabled,
+  ...props
+}: React.ComponentProps<typeof SliderPrimitive.Root>) {
+  const initialValues = React.useMemo(() => {
+    if (value !== undefined) {
+      return Array.isArray(value) ? value : [value]
+    }
+    if (defaultValue !== undefined) {
+      return Array.isArray(defaultValue) ? defaultValue : [defaultValue]
+    }
+    return [min]
+  }, [value, defaultValue, min])
+
+  const [internalValues, setInternalValues] =
+    React.useState<number[]>(initialValues)
+  const [isDragging, setIsDragging] = React.useState(false)
+  const [isFocused, setIsFocused] = React.useState(false)
+
+  const handleValueChange = (newValues: number[]) => {
+    setInternalValues(newValues)
+    onValueChange?.(newValues)
+  }
+
+  const currentValue = internalValues[0] ?? min
+  const percentage = getAdjustedPercentage(currentValue, min, max)

-const Slider = React.forwardRef<
-  React.ElementRef<typeof SliderPrimitive.Root>,
-  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
->(({ className, ...props }, ref) => (
-  <SliderPrimitive.Root
-    ref={ref}
-    className={cn("relative flex w-full touch-none select-none items-center", className)}
-    {...props}
-  >
-    <SliderPrimitive.Track className="relative h-2.5 w-full grow overflow-hidden rounded-full bg-green-500">
-      <SliderPrimitive.Range className="absolute h-full bg-red-500" />
-    </SliderPrimitive.Track>
-    {(props.value ?? props.defaultValue ?? []).map((value) => (
-      <SliderPrimitive.Thumb
-        key={`slider-thumb-${value}`}
+  return (
+    <TooltipProvider delayDuration={0}>
+      <SliderPrimitive.Root
+        data-slot="slider"
+        defaultValue={defaultValue}
+        value={value}
+        min={min}
+        max={max}
+        disabled={disabled}
+        onValueChange={handleValueChange}
+        onPointerDown={() => setIsDragging(true)}
+        onPointerUp={() => setIsDragging(false)}
+        onFocus={() => setIsFocused(true)}
+        onBlur={() => setIsFocused(false)}
         className={cn(
-          "block h-5 w-5 rounded-full border-0",
-          "bg-green-500",
-          "ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
-          "disabled:pointer-events-none disabled:opacity-50",
-          "shadow-[0_2px_4px_rgba(0,0,0,0.5)]",
+          "relative flex w-full touch-none items-center select-none data-[disabled]:opacity-50 data-[orientation=vertical]:h-full data-[orientation=vertical]:min-h-44 data-[orientation=vertical]:w-auto data-[orientation=vertical]:flex-col cursor-pointer",
+          className,
         )}
-      />
-    ))}
-  </SliderPrimitive.Root>
-))
-Slider.displayName = SliderPrimitive.Root.displayName
+        {...props}
+      >
+        <SliderPrimitive.Track
+          data-slot="slider-track"
+          className={cn(
+            "bg-[#090C15]/10 relative grow overflow-hidden rounded-full data-[orientation=horizontal]:h-1.5 data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-1.5",
+          )}
+        >
+          <div
+            className={cn(
+              "absolute h-full right-0",
+              disabled ? "bg-slider-disabled" : "bg-primary",
+            )}
+            style={{
+              width: `${100 - percentage}%`,
+            }}
+          />
+          <SliderPrimitive.Range
+            data-slot="slider-range"
+            className="opacity-0 absolute data-[orientation=horizontal]:h-full data-[orientation=vertical]:w-full"
+          />
+        </SliderPrimitive.Track>
+        {internalValues.map((currentValue, index) => (
+          <Tooltip key={index} open={isDragging || isFocused}>
+            <TooltipTrigger asChild>
+              <SliderPrimitive.Thumb
+                data-slot="slider-thumb"
+                className={cn(
+                  "block size-[14px] rounded-full transition-all duration-200 ease-in-out focus:outline-none z-10",
+                  disabled
+                    ? "bg-slider-disabled hover:shadow-[0_0_0_7px] hover:shadow-slider-disabled-shadow focus:shadow-[0_0_0_7px] focus:shadow-slider-disabled-shadow"
+                    : "bg-primary hover:bg-violet3 hover:shadow-[0_0_0_7px] hover:shadow-primary/20 focus:shadow-[0_0_0_7px] focus:shadow-primary/20",
+                )}
+              />
+            </TooltipTrigger>
+            <TooltipContent className="bg-[#E5E7EB]/80">
+              <p className={cn(disabled ? "text-slider-disabled-tooltip" : "")}>
+                {Math.round(currentValue)}
+              </p>
+            </TooltipContent>
+          </Tooltip>
+        ))}
+      </SliderPrimitive.Root>
+    </TooltipProvider>
+  )
+}

 export { Slider }
diff --git a/examples/mini-app/src/components/ui/table.tsx b/examples/mini-app/src/components/ui/table.tsx
index 6df364e..b488b8d 100644
--- a/examples/mini-app/src/components/ui/table.tsx
+++ b/examples/mini-app/src/components/ui/table.tsx
@@ -4,7 +4,10 @@ import { cn } from "../../lib/utils"

 function Table({ className, ...props }: React.ComponentProps<"table">) {
   return (
-    <div data-slot="table-container" className="relative w-full overflow-x-auto">
+    <div
+      data-slot="table-container"
+      className="relative w-full overflow-x-auto"
+    >
       <table
         data-slot="table"
         className={cn("w-full caption-bottom text-sm", className)}
@@ -15,7 +18,13 @@ function Table({ className, ...props }: React.ComponentProps<"table">) {
 }

 function TableHeader({ className, ...props }: React.ComponentProps<"thead">) {
-  return <thead data-slot="table-header" className={cn("[&_tr]:border-b", className)} {...props} />
+  return (
+    <thead
+      data-slot="table-header"
+      className={cn("[&_tr]:border-b", className)}
+      {...props}
+    />
+  )
 }

 function TableBody({ className, ...props }: React.ComponentProps<"tbody">) {
@@ -32,7 +41,10 @@ function TableFooter({ className, ...props }: React.ComponentProps<"tfoot">) {
   return (
     <tfoot
       data-slot="table-footer"
-      className={cn("bg-muted/50 border-t font-medium [&>tr]:last:border-b-0", className)}
+      className={cn(
+        "bg-muted/50 border-t font-medium [&>tr]:last:border-b-0",
+        className,
+      )}
       {...props}
     />
   )
@@ -77,7 +89,10 @@ function TableCell({ className, ...props }: React.ComponentProps<"td">) {
   )
 }

-function TableCaption({ className, ...props }: React.ComponentProps<"caption">) {
+function TableCaption({
+  className,
+  ...props
+}: React.ComponentProps<"caption">) {
   return (
     <caption
       data-slot="table-caption"
@@ -87,4 +102,13 @@ function TableCaption({ className, ...props }: React.ComponentProps<"caption">)
   )
 }

-export { Table, TableHeader, TableBody, TableFooter, TableHead, TableRow, TableCell, TableCaption }
+export {
+  Table,
+  TableHeader,
+  TableBody,
+  TableFooter,
+  TableHead,
+  TableRow,
+  TableCell,
+  TableCaption,
+}
diff --git a/examples/mini-app/src/components/ui/tooltip.tsx b/examples/mini-app/src/components/ui/tooltip.tsx
new file mode 100644
index 0000000..95ec093
--- /dev/null
+++ b/examples/mini-app/src/components/ui/tooltip.tsx
@@ -0,0 +1,63 @@
+import * as React from "react"
+import * as TooltipPrimitive from "@radix-ui/react-tooltip"
+
+import { cn } from "../../lib/utils"
+
+function TooltipProvider({
+  delayDuration = 0,
+  ...props
+}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {
+  return (
+    <TooltipPrimitive.Provider
+      data-slot="tooltip-provider"
+      delayDuration={delayDuration}
+      {...props}
+    />
+  )
+}
+
+function Tooltip({
+  ...props
+}: React.ComponentProps<typeof TooltipPrimitive.Root>) {
+  return (
+    <TooltipProvider>
+      <TooltipPrimitive.Root data-slot="tooltip" {...props} />
+    </TooltipProvider>
+  )
+}
+
+function TooltipTrigger({
+  ...props
+}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {
+  return <TooltipPrimitive.Trigger data-slot="tooltip-trigger" {...props} />
+}
+
+function TooltipContent({
+  className,
+  sideOffset = 0,
+  children,
+  ...props
+}: React.ComponentProps<typeof TooltipPrimitive.Content>) {
+  return (
+    <TooltipPrimitive.Portal>
+      <TooltipPrimitive.Content
+        data-slot="tooltip-content"
+        sideOffset={sideOffset}
+        className={cn(
+          "bg-[#E5E7EB]/80 text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit origin-(--radix-tooltip-content-transform-origin) rounded-md px-2.5 py-1 text-[12px]",
+          className,
+        )}
+        {...props}
+      >
+        {children}
+        <TooltipPrimitive.Arrow
+          className="fill-[#E5E7EB]/80 z-50 mb-1"
+          width={10}
+          height={5}
+        />
+      </TooltipPrimitive.Content>
+    </TooltipPrimitive.Portal>
+  )
+}
+
+export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }
diff --git a/examples/mini-app/src/context/BettingConfigContext.tsx b/examples/mini-app/src/context/BettingConfigContext.tsx
index 7bab8d7..84fefe4 100644
--- a/examples/mini-app/src/context/BettingConfigContext.tsx
+++ b/examples/mini-app/src/context/BettingConfigContext.tsx
@@ -7,5 +7,9 @@ export const BettingConfigProvider = ({
   value: BettingConfig
   children: React.ReactNode
 }) => {
-  return <BettingConfigContext.Provider value={value}>{children}</BettingConfigContext.Provider>
+  return (
+    <BettingConfigContext.Provider value={value}>
+      {children}
+    </BettingConfigContext.Provider>
+  )
 }
diff --git a/examples/mini-app/src/context/useBettingConfig.ts b/examples/mini-app/src/context/useBettingConfig.ts
index 3955fa8..e5de497 100644
--- a/examples/mini-app/src/context/useBettingConfig.ts
+++ b/examples/mini-app/src/context/useBettingConfig.ts
@@ -3,9 +3,14 @@ import { createContext, useContext } from "react"
 export type BettingConfig = {
   affiliate?: string
 }
-export const BettingConfigContext = createContext<BettingConfig | undefined>(undefined)
+export const BettingConfigContext = createContext<BettingConfig | undefined>(
+  undefined,
+)
 export const useBettingConfig = () => {
   const context = useContext(BettingConfigContext)
-  if (!context) throw new Error("useBettingConfig must be used inside BettingConfigProvider")
+  if (!context)
+    throw new Error(
+      "useBettingConfig must be used inside BettingConfigProvider",
+    )
   return context
 }
diff --git a/examples/mini-app/src/hooks/types.ts b/examples/mini-app/src/hooks/types.ts
index e0f11b9..81225f3 100644
--- a/examples/mini-app/src/hooks/types.ts
+++ b/examples/mini-app/src/hooks/types.ts
@@ -1,13 +1,24 @@
-import type { CASINO_GAME_TYPE, COINTOSS_FACE } from "@betswirl/sdk-core"
 import type { Abi, Hex } from "viem"
+import type {
+  CASINO_GAME_TYPE,
+  COINTOSS_FACE,
+  DiceNumber,
+} from "@betswirl/sdk-core"

-export interface GameResult {
+export interface CoinTossGameResult {
   isWin: boolean
   payout: bigint
   currency: string
   rolled: COINTOSS_FACE
 }

+export interface DiceGameResult {
+  isWin: boolean
+  payout: bigint
+  currency: string
+  rolled: DiceNumber
+}
+
 export interface WatchTarget {
   betId: bigint
   contractAddress: Hex
diff --git a/examples/mini-app/src/hooks/useCoinTossBetResultWatcher.ts b/examples/mini-app/src/hooks/useCoinTossBetResultWatcher.ts
new file mode 100644
index 0000000..dfa616f
--- /dev/null
+++ b/examples/mini-app/src/hooks/useCoinTossBetResultWatcher.ts
@@ -0,0 +1,261 @@
+import { useState, useCallback, useEffect, useMemo } from "react"
+import type { Log, AbiEvent } from "viem"
+import { decodeEventLog } from "viem"
+import { usePublicClient, useWatchContractEvent } from "wagmi"
+import { CoinToss } from "@betswirl/sdk-core"
+import type { CoinTossGameResult, WatchTarget } from "./types"
+import { createLogger } from "../lib/logger"
+
+const logger = createLogger("useCoinTossBetResultWatcher")
+
+interface UseCoinTossBetResultWatcherProps {
+  watchParams: WatchTarget | null
+  publicClient: ReturnType<typeof usePublicClient> | null
+  enabled: boolean
+}
+
+type CoinTossBetResultWatcherStatus =
+  | "idle"
+  | "listening"
+  | "fallback_listening"
+  | "success"
+  | "error"
+
+interface CoinTossBetResultWatcherOutput {
+  gameResult: CoinTossGameResult | null
+  status: CoinTossBetResultWatcherStatus
+  error: Error | null
+  reset: () => void
+}
+
+const POLLING_INTERVAL = 2500
+const PRIMARY_WATCHER_TIMEOUT = 30000
+
+export function useCoinTossBetResultWatcher({
+  watchParams,
+  publicClient,
+  enabled,
+}: UseCoinTossBetResultWatcherProps): CoinTossBetResultWatcherOutput {
+  const [internalGameResult, setInternalGameResult] =
+    useState<CoinTossGameResult | null>(null)
+  const [status, setStatus] = useState<CoinTossBetResultWatcherStatus>("idle")
+  const [error, setError] = useState<Error | null>(null)
+  const [filterErrorOccurred, setFilterErrorOccurred] = useState<boolean>(false)
+
+  const eventArgs = useMemo(() => {
+    if (watchParams?.betId) {
+      return { id: watchParams.betId }
+    }
+    return undefined
+  }, [watchParams?.betId])
+
+  const reset = useCallback(() => {
+    logger.debug("reset: Resetting watcher state")
+    setInternalGameResult(null)
+    setStatus("idle")
+    setError(null)
+    setFilterErrorOccurred(false)
+  }, [])
+
+  useEffect(() => {
+    if (!enabled) {
+      if (status !== "idle") reset()
+      return
+    }
+
+    if (watchParams && publicClient && status === "idle") {
+      logger.debug(
+        "useEffect[enabled,watchParams]: Watcher enabled, starting.",
+        {
+          watchParams,
+        },
+      )
+      setStatus("listening")
+      setError(null)
+      setFilterErrorOccurred(false)
+    }
+  }, [enabled, watchParams, publicClient, status, reset])
+
+  useEffect(() => {
+    if (
+      enabled &&
+      watchParams &&
+      status === "listening" &&
+      !filterErrorOccurred
+    ) {
+      logger.debug(
+        `useEffect[timeout]: Starting primary watcher timeout (${PRIMARY_WATCHER_TIMEOUT}ms).`,
+        { betId: watchParams.betId },
+      )
+      const timerId = setTimeout(() => {
+        logger.warn(
+          `useEffect[timeout]: Primary watcher timed out for betId ${watchParams.betId}. Switching to fallback.`,
+        )
+        setFilterErrorOccurred(true)
+        setStatus("fallback_listening")
+      }, PRIMARY_WATCHER_TIMEOUT)
+
+      return () => {
+        logger.debug(
+          `useEffect[timeout]: Clearing primary watcher timeout for betId ${watchParams.betId}.`,
+        )
+        clearTimeout(timerId)
+      }
+    }
+  }, [enabled, watchParams, status, filterErrorOccurred])
+
+  const processEventLogs = useCallback(
+    (logs: readonly Log[], currentWatchParams: WatchTarget) => {
+      const { betId, eventAbi, eventName } = currentWatchParams
+      logger.debug(
+        `processEventLogs: Processing ${logs.length} logs for betId ${betId}`,
+        { eventName },
+      )
+
+      for (const log of logs) {
+        const decodedRollLog = decodeEventLog({
+          abi: eventAbi,
+          data: log.data,
+          topics: log.topics,
+          strict: false,
+        })
+
+        if (decodedRollLog.eventName !== eventName) continue
+
+        const rollArgs = decodedRollLog.args as unknown as {
+          id: bigint
+          payout: bigint
+          rolled: boolean[]
+        }
+
+        if (rollArgs.id === betId) {
+          const rolledResult = CoinToss.decodeRolled(rollArgs.rolled[0])
+          const result: CoinTossGameResult = {
+            isWin: rollArgs.payout > 0n,
+            payout: rollArgs.payout,
+            currency: "ETH",
+            rolled: rolledResult,
+          }
+          logger.debug("processEventLogs: Bet event processed:", {
+            ...result,
+            betId,
+            txHash: log.transactionHash,
+          })
+          setInternalGameResult(result)
+          setStatus("success")
+          setError(null)
+          return
+        }
+      }
+    },
+    [],
+  )
+
+  useWatchContractEvent({
+    address: watchParams?.contractAddress,
+    abi: watchParams?.eventAbi,
+    eventName: watchParams?.eventName,
+    args: eventArgs,
+    enabled:
+      enabled &&
+      !!watchParams &&
+      !filterErrorOccurred &&
+      status === "listening",
+    pollingInterval: POLLING_INTERVAL,
+    onLogs: (logs) => {
+      if (!watchParams) return
+      logger.debug(
+        `useWatchContractEvent: Received ${logs.length} logs (primary)`,
+      )
+      processEventLogs(logs, watchParams)
+    },
+    onError: (watchError) => {
+      logger.debug(
+        "useWatchContractEvent: Error from primary watcher:",
+        watchError,
+      )
+      setFilterErrorOccurred(true)
+      setStatus("fallback_listening")
+    },
+  })
+
+  useEffect(() => {
+    if (
+      !enabled ||
+      !watchParams ||
+      !publicClient ||
+      !filterErrorOccurred ||
+      status !== "fallback_listening"
+    ) {
+      return
+    }
+    logger.debug("fallbackPoller: Starting fallback polling.", {
+      betId: watchParams.betId,
+    })
+    let isActive = true
+
+    const poll = async () => {
+      if (!isActive || !watchParams || !publicClient) return
+
+      const { contractAddress, eventName, eventAbi, betId } = watchParams
+      const eventDefinition = eventAbi.find(
+        (item): item is AbiEvent =>
+          item.type === "event" && item.name === eventName,
+      )
+
+      if (!eventDefinition) {
+        logger.debug(
+          `fallbackPoller: Critical: Event definition for ${eventName} not found.`,
+        )
+        setError(new Error(`Event definition for ${eventName} not found.`))
+        setStatus("error")
+        return
+      }
+
+      const currentBlock = await publicClient.getBlockNumber()
+      const fromBlock = currentBlock > 100n ? currentBlock - 100n : 0n
+      logger.debug(
+        `fallbackPoller: Querying logs from ${fromBlock} to ${currentBlock}`,
+      )
+      const logs = await publicClient.getLogs({
+        address: contractAddress,
+        event: eventDefinition,
+        args: { id: betId },
+        fromBlock,
+        toBlock: currentBlock,
+      })
+      logger.debug(
+        `fallbackPoller: Fetched ${logs.length} logs (fallback) for betId ${betId}`,
+      )
+      if (logs.length > 0) {
+        processEventLogs(logs, watchParams)
+      }
+    }
+
+    poll()
+    const intervalId = setInterval(poll, POLLING_INTERVAL)
+
+    return () => {
+      logger.debug("fallbackPoller: Stopping fallback polling.")
+      isActive = false
+      clearInterval(intervalId)
+    }
+  }, [
+    enabled,
+    watchParams,
+    publicClient,
+    filterErrorOccurred,
+    status,
+    processEventLogs,
+  ])
+
+  useEffect(() => {
+    if (status === "success" || status === "error") {
+      logger.debug(
+        `useEffect[status]: Final status reached: ${status}. Watcher inactive.`,
+      )
+    }
+  }, [status])
+
+  return { gameResult: internalGameResult, status, error, reset }
+}
diff --git a/examples/mini-app/src/hooks/usePlaceBet.ts b/examples/mini-app/src/hooks/useCoinTossPlaceBet.ts
similarity index 79%
rename from examples/mini-app/src/hooks/usePlaceBet.ts
rename to examples/mini-app/src/hooks/useCoinTossPlaceBet.ts
index b488eca..5b380e6 100644
--- a/examples/mini-app/src/hooks/usePlaceBet.ts
+++ b/examples/mini-app/src/hooks/useCoinTossPlaceBet.ts
@@ -1,21 +1,21 @@
+import { useState, useCallback, useEffect } from "react"
+import { Hex, zeroAddress, decodeEventLog } from "viem"
+import { useAccount, usePublicClient, useWriteContract } from "wagmi"
+import { useOnchainKit } from "@coinbase/onchainkit"
 import {
-  CASINO_GAME_TYPE,
-  COINTOSS_FACE,
-  CasinoChainId,
-  CoinToss,
   GenericCasinoBetParams,
+  CasinoChainId,
   getChainlinkVrfCostFunctionData,
-  getPlaceBetEventData,
   getPlaceBetFunctionData,
+  getPlaceBetEventData,
   getRollEventData,
+  CoinToss,
+  COINTOSS_FACE,
+  CASINO_GAME_TYPE,
 } from "@betswirl/sdk-core"
-import { useOnchainKit } from "@coinbase/onchainkit"
-import { useCallback, useEffect, useState } from "react"
-import { Hex, decodeEventLog, zeroAddress } from "viem"
-import { useAccount, usePublicClient, useWriteContract } from "wagmi"
+import { useCoinTossBetResultWatcher } from "./useCoinTossBetResultWatcher"
+import type { CoinTossGameResult, WatchTarget } from "./types"
 import { createLogger } from "../lib/logger"
-import type { GameResult, WatchTarget } from "./types"
-import { useBetResultWatcher } from "./useBetResultWatcher"

 const logger = createLogger("usePlaceBet")

@@ -24,22 +24,25 @@ interface SubmitBetResult {
   contractAddress: Hex
 }

-export function usePlaceBet() {
+export function useCoinTossPlaceBet() {
   const { chain } = useOnchainKit()
   const chainId = chain?.id as CasinoChainId | undefined
   const publicClient = usePublicClient({ chainId })
   const { address: connectedAddress } = useAccount()
-  const { writeContractAsync, reset: resetWagmiWriteContract } = useWriteContract()
+  const { writeContractAsync, reset: resetWagmiWriteContract } =
+    useWriteContract()

-  const [betStatus, setBetStatus] = useState<"pending" | "success" | "error" | null>(null)
-  const [gameResult, setGameResult] = useState<GameResult | null>(null)
+  const [betStatus, setBetStatus] = useState<
+    "pending" | "success" | "error" | null
+  >(null)
+  const [gameResult, setGameResult] = useState<CoinTossGameResult | null>(null)
   const [watchTarget, setWatchTarget] = useState<WatchTarget | null>(null)

   const {
     gameResult: watcherGameResult,
     status: watcherStatus,
     reset: resetWatcher,
-  } = useBetResultWatcher({
+  } = useCoinTossBetResultWatcher({
     watchParams: watchTarget,
     publicClient,
     enabled: !!watchTarget,
@@ -58,7 +61,7 @@ export function usePlaceBet() {
     }
   }, [watcherStatus, watcherGameResult])

-  const placeBet = useCallback(
+  const placeCoinTossBet = useCallback(
     async (betAmount: bigint, choice: COINTOSS_FACE) => {
       try {
         resetWagmiWriteContract()
@@ -72,8 +75,15 @@ export function usePlaceBet() {
           betAmount,
         }

-        if (!publicClient || !chainId || !connectedAddress || !writeContractAsync) {
-          logger.error("placeBet: Wagmi/OnchainKit clients or address are not initialized.")
+        if (
+          !publicClient ||
+          !chainId ||
+          !connectedAddress ||
+          !writeContractAsync
+        ) {
+          logger.error(
+            "placeBet: Wagmi/OnchainKit clients or address are not initialized.",
+          )
           setBetStatus("error")
           return
         }
@@ -83,7 +93,11 @@ export function usePlaceBet() {
         })
         setBetStatus("pending")

-        const vrfCost = await _fetchVrfCost(betParams.game, chainId, publicClient)
+        const vrfCost = await _fetchVrfCost(
+          betParams.game,
+          chainId,
+          publicClient,
+        )

         const submitResult = await _submitBetTransaction(
           betParams,
@@ -111,7 +125,11 @@ export function usePlaceBet() {
           return
         }

-        const { data: rollEventData } = getRollEventData(betParams.game, chainId, betId)
+        const { data: rollEventData } = getRollEventData(
+          betParams.game,
+          chainId,
+          betId,
+        )
         logger.debug("placeBet: Setting up Roll event listener...")
         setWatchTarget({
           betId,
@@ -143,7 +161,7 @@ export function usePlaceBet() {
     resetWatcher()
   }, [resetWatcher])

-  return { placeBet, betStatus, gameResult, resetBetState }
+  return { placeCoinTossBet, betStatus, gameResult, resetBetState }
 }

 async function _fetchVrfCost(
@@ -156,7 +174,12 @@ async function _fetchVrfCost(
     throw new Error("publicClient is undefined")
   }
   logger.debug("_fetchVrfCost: Getting VRF cost...")
-  const vrfCostFunctionData = getChainlinkVrfCostFunctionData(gameType, zeroAddress, 1, chainId)
+  const vrfCostFunctionData = getChainlinkVrfCostFunctionData(
+    gameType,
+    zeroAddress,
+    1,
+    chainId,
+  )
   const vrfCost = (await publicClient.readContract({
     address: vrfCostFunctionData.data.to,
     abi: vrfCostFunctionData.data.abi,
@@ -175,7 +198,10 @@ async function _submitBetTransaction(
   writeContractAsync: ReturnType<typeof useWriteContract>["writeContractAsync"],
 ): Promise<SubmitBetResult> {
   logger.debug("_submitBetTransaction: Preparing and sending transaction...")
-  const placeBetTxData = getPlaceBetFunctionData({ ...betParams, receiver }, chainId)
+  const placeBetTxData = getPlaceBetFunctionData(
+    { ...betParams, receiver },
+    chainId,
+  )
   const txHash = await writeContractAsync({
     abi: placeBetTxData.data.abi,
     address: placeBetTxData.data.to,
@@ -206,10 +232,15 @@ async function _extractBetIdFromReceipt(
   const receipt = await publicClient.waitForTransactionReceipt({ hash: txHash })
   logger.debug("_extractBetIdFromReceipt: Receipt received.")

-  const { data: placeBetEventData } = getPlaceBetEventData(gameType, chainId, receiver)
+  const { data: placeBetEventData } = getPlaceBetEventData(
+    gameType,
+    chainId,
+    receiver,
+  )

   for (const log of receipt.logs) {
-    if (log.address.toLowerCase() !== expectedContractAddress.toLowerCase()) continue
+    if (log.address.toLowerCase() !== expectedContractAddress.toLowerCase())
+      continue
     const decodedLog = decodeEventLog({
       abi: placeBetEventData.abi,
       data: log.data,
diff --git a/examples/mini-app/src/hooks/useBetResultWatcher.ts b/examples/mini-app/src/hooks/useDiceBetResultWatcher.ts
similarity index 54%
rename from examples/mini-app/src/hooks/useBetResultWatcher.ts
rename to examples/mini-app/src/hooks/useDiceBetResultWatcher.ts
index 3b98186..4bdc568 100644
--- a/examples/mini-app/src/hooks/useBetResultWatcher.ts
+++ b/examples/mini-app/src/hooks/useDiceBetResultWatcher.ts
@@ -1,24 +1,29 @@
-import { CASINO_GAME_TYPE, COINTOSS_FACE, CoinToss } from "@betswirl/sdk-core"
-import { useCallback, useEffect, useMemo, useState } from "react"
-import type { AbiEvent, Log } from "viem"
+import { useState, useCallback, useEffect, useMemo } from "react"
+import type { Log, AbiEvent } from "viem"
 import { decodeEventLog } from "viem"
 import { usePublicClient, useWatchContractEvent } from "wagmi"
+import { Dice, DiceNumber } from "@betswirl/sdk-core"
+import type { DiceGameResult, WatchTarget } from "./types"
 import { createLogger } from "../lib/logger"
-import type { GameResult, WatchTarget } from "./types"

-const logger = createLogger("useBetResultWatcher")
+const logger = createLogger("useDiceBetResultWatcher")

-interface UseBetResultWatcherProps {
+interface UseDiceBetResultWatcherProps {
   watchParams: WatchTarget | null
   publicClient: ReturnType<typeof usePublicClient> | null
   enabled: boolean
 }

-type BetResultWatcherStatus = "idle" | "listening" | "fallback_listening" | "success" | "error"
+type DiceBetResultWatcherStatus =
+  | "idle"
+  | "listening"
+  | "fallback_listening"
+  | "success"
+  | "error"

-interface BetResultWatcherOutput {
-  gameResult: GameResult | null
-  status: BetResultWatcherStatus
+interface DiceBetResultWatcherOutput {
+  gameResult: DiceGameResult | null
+  status: DiceBetResultWatcherStatus
   error: Error | null
   reset: () => void
 }
@@ -26,23 +31,14 @@ interface BetResultWatcherOutput {
 const POLLING_INTERVAL = 2500
 const PRIMARY_WATCHER_TIMEOUT = 30000

-function _decodeRolled(rolled: boolean[], game: CASINO_GAME_TYPE): COINTOSS_FACE {
-  switch (game) {
-    case CASINO_GAME_TYPE.COINTOSS:
-      return CoinToss.decodeRolled(rolled[0])
-    default:
-      logger.debug(`_decodeRolled: Unsupported game type: ${game}`)
-      throw new Error(`Unsupported game type for decoding roll: ${game}`)
-  }
-}
-
-export function useBetResultWatcher({
+export function useDiceBetResultWatcher({
   watchParams,
   publicClient,
   enabled,
-}: UseBetResultWatcherProps): BetResultWatcherOutput {
-  const [internalGameResult, setInternalGameResult] = useState<GameResult | null>(null)
-  const [status, setStatus] = useState<BetResultWatcherStatus>("idle")
+}: UseDiceBetResultWatcherProps): DiceBetResultWatcherOutput {
+  const [internalGameResult, setInternalGameResult] =
+    useState<DiceGameResult | null>(null)
+  const [status, setStatus] = useState<DiceBetResultWatcherStatus>("idle")
   const [error, setError] = useState<Error | null>(null)
   const [filterErrorOccurred, setFilterErrorOccurred] = useState<boolean>(false)

@@ -68,9 +64,12 @@ export function useBetResultWatcher({
     }

     if (watchParams && publicClient && status === "idle") {
-      logger.debug("useEffect[enabled,watchParams]: Watcher enabled, starting.", {
-        watchParams,
-      })
+      logger.debug(
+        "useEffect[enabled,watchParams]: Watcher enabled, starting.",
+        {
+          watchParams,
+        },
+      )
       setStatus("listening")
       setError(null)
       setFilterErrorOccurred(false)
@@ -78,7 +77,12 @@ export function useBetResultWatcher({
   }, [enabled, watchParams, publicClient, status, reset])

   useEffect(() => {
-    if (enabled && watchParams && status === "listening" && !filterErrorOccurred) {
+    if (
+      enabled &&
+      watchParams &&
+      status === "listening" &&
+      !filterErrorOccurred
+    ) {
       logger.debug(
         `useEffect[timeout]: Starting primary watcher timeout (${PRIMARY_WATCHER_TIMEOUT}ms).`,
         { betId: watchParams.betId },
@@ -100,63 +104,76 @@ export function useBetResultWatcher({
     }
   }, [enabled, watchParams, status, filterErrorOccurred])

-  const processEventLogs = useCallback((logs: readonly Log[], currentWatchParams: WatchTarget) => {
-    const { betId, gameType, eventAbi, eventName } = currentWatchParams
-    logger.debug(`processEventLogs: Processing ${logs.length} logs for betId ${betId}`, {
-      eventName,
-    })
+  const processEventLogs = useCallback(
+    (logs: readonly Log[], currentWatchParams: WatchTarget) => {
+      const { betId, eventAbi, eventName } = currentWatchParams
+      logger.debug(
+        `processEventLogs: Processing ${logs.length} logs for betId ${betId}`,
+        { eventName },
+      )

-    for (const log of logs) {
-      const decodedRollLog = decodeEventLog({
-        abi: eventAbi,
-        data: log.data,
-        topics: log.topics,
-        strict: false,
-      })
+      for (const log of logs) {
+        const decodedRollLog = decodeEventLog({
+          abi: eventAbi,
+          data: log.data,
+          topics: log.topics,
+          strict: false,
+        })

-      if (decodedRollLog.eventName !== eventName) continue
+        if (decodedRollLog.eventName !== eventName) continue

-      const rollArgs = decodedRollLog.args as unknown as {
-        id: bigint
-        payout: bigint
-        rolled: boolean[]
-      }
+        const rollArgs = decodedRollLog.args as unknown as {
+          id: bigint
+          payout: bigint
+          rolled: DiceNumber
+        }

-      if (rollArgs.id === betId) {
-        const rolledResult = _decodeRolled(rollArgs.rolled, gameType)
-        const result: GameResult = {
-          isWin: rollArgs.payout > 0n,
-          payout: rollArgs.payout,
-          currency: "ETH",
-          rolled: rolledResult,
+        if (rollArgs.id === betId) {
+          const rolledResult = Dice.decodeRolled(rollArgs.rolled)
+          const result: DiceGameResult = {
+            isWin: rollArgs.payout > 0n,
+            payout: rollArgs.payout,
+            currency: "ETH",
+            rolled: rolledResult,
+          }
+          logger.debug("processEventLogs: Bet event processed:", {
+            ...result,
+            betId,
+            txHash: log.transactionHash,
+          })
+          setInternalGameResult(result)
+          setStatus("success")
+          setError(null)
+          return
         }
-        logger.debug("processEventLogs: Bet event processed:", {
-          ...result,
-          betId,
-          txHash: log.transactionHash,
-        })
-        setInternalGameResult(result)
-        setStatus("success")
-        setError(null)
-        return
       }
-    }
-  }, [])
+    },
+    [],
+  )

   useWatchContractEvent({
     address: watchParams?.contractAddress,
     abi: watchParams?.eventAbi,
     eventName: watchParams?.eventName,
     args: eventArgs,
-    enabled: enabled && !!watchParams && !filterErrorOccurred && status === "listening",
+    enabled:
+      enabled &&
+      !!watchParams &&
+      !filterErrorOccurred &&
+      status === "listening",
     pollingInterval: POLLING_INTERVAL,
     onLogs: (logs) => {
       if (!watchParams) return
-      logger.debug(`useWatchContractEvent: Received ${logs.length} logs (primary)`)
+      logger.debug(
+        `useWatchContractEvent: Received ${logs.length} logs (primary)`,
+      )
       processEventLogs(logs, watchParams)
     },
     onError: (watchError) => {
-      logger.debug("useWatchContractEvent: Error from primary watcher:", watchError)
+      logger.debug(
+        "useWatchContractEvent: Error from primary watcher:",
+        watchError,
+      )
       setFilterErrorOccurred(true)
       setStatus("fallback_listening")
     },
@@ -182,11 +199,14 @@ export function useBetResultWatcher({

       const { contractAddress, eventName, eventAbi, betId } = watchParams
       const eventDefinition = eventAbi.find(
-        (item): item is AbiEvent => item.type === "event" && item.name === eventName,
+        (item): item is AbiEvent =>
+          item.type === "event" && item.name === eventName,
       )

       if (!eventDefinition) {
-        logger.debug(`fallbackPoller: Critical: Event definition for ${eventName} not found.`)
+        logger.debug(
+          `fallbackPoller: Critical: Event definition for ${eventName} not found.`,
+        )
         setError(new Error(`Event definition for ${eventName} not found.`))
         setStatus("error")
         return
@@ -194,7 +214,9 @@ export function useBetResultWatcher({

       const currentBlock = await publicClient.getBlockNumber()
       const fromBlock = currentBlock > 100n ? currentBlock - 100n : 0n
-      logger.debug(`fallbackPoller: Querying logs from ${fromBlock} to ${currentBlock}`)
+      logger.debug(
+        `fallbackPoller: Querying logs from ${fromBlock} to ${currentBlock}`,
+      )
       const logs = await publicClient.getLogs({
         address: contractAddress,
         event: eventDefinition,
@@ -202,7 +224,9 @@ export function useBetResultWatcher({
         fromBlock,
         toBlock: currentBlock,
       })
-      logger.debug(`fallbackPoller: Fetched ${logs.length} logs (fallback) for betId ${betId}`)
+      logger.debug(
+        `fallbackPoller: Fetched ${logs.length} logs (fallback) for betId ${betId}`,
+      )
       if (logs.length > 0) {
         processEventLogs(logs, watchParams)
       }
@@ -216,11 +240,20 @@ export function useBetResultWatcher({
       isActive = false
       clearInterval(intervalId)
     }
-  }, [enabled, watchParams, publicClient, filterErrorOccurred, status, processEventLogs])
+  }, [
+    enabled,
+    watchParams,
+    publicClient,
+    filterErrorOccurred,
+    status,
+    processEventLogs,
+  ])

   useEffect(() => {
     if (status === "success" || status === "error") {
-      logger.debug(`useEffect[status]: Final status reached: ${status}. Watcher inactive.`)
+      logger.debug(
+        `useEffect[status]: Final status reached: ${status}. Watcher inactive.`,
+      )
     }
   }, [status])

diff --git a/examples/mini-app/src/hooks/useDicePlaceBet.ts b/examples/mini-app/src/hooks/useDicePlaceBet.ts
new file mode 100644
index 0000000..7f894f7
--- /dev/null
+++ b/examples/mini-app/src/hooks/useDicePlaceBet.ts
@@ -0,0 +1,256 @@
+import { useState, useCallback, useEffect } from "react"
+import { Hex, zeroAddress, decodeEventLog } from "viem"
+import { useAccount, usePublicClient, useWriteContract } from "wagmi"
+import { useOnchainKit } from "@coinbase/onchainkit"
+import {
+  GenericCasinoBetParams,
+  CasinoChainId,
+  getChainlinkVrfCostFunctionData,
+  getPlaceBetFunctionData,
+  getPlaceBetEventData,
+  getRollEventData,
+  CASINO_GAME_TYPE,
+  DiceNumber,
+  Dice,
+} from "@betswirl/sdk-core"
+import { useDiceBetResultWatcher } from "./useDiceBetResultWatcher"
+import type { DiceGameResult, WatchTarget } from "./types"
+import { createLogger } from "../lib/logger"
+
+const logger = createLogger("usePlaceBet")
+
+interface SubmitBetResult {
+  txHash: Hex
+  contractAddress: Hex
+}
+
+export function useDicePlaceBet() {
+  const { chain } = useOnchainKit()
+  const chainId = chain?.id as CasinoChainId | undefined
+  const publicClient = usePublicClient({ chainId })
+  const { address: connectedAddress } = useAccount()
+  const { writeContractAsync, reset: resetWagmiWriteContract } =
+    useWriteContract()
+
+  const [betStatus, setBetStatus] = useState<
+    "pending" | "success" | "error" | null
+  >(null)
+  const [gameResult, setGameResult] = useState<DiceGameResult | null>(null)
+  const [watchTarget, setWatchTarget] = useState<WatchTarget | null>(null)
+
+  const {
+    gameResult: watcherGameResult,
+    status: watcherStatus,
+    reset: resetWatcher,
+  } = useDiceBetResultWatcher({
+    watchParams: watchTarget,
+    publicClient,
+    enabled: !!watchTarget,
+  })
+
+  useEffect(() => {
+    if (watcherStatus === "success" && watcherGameResult) {
+      setGameResult(watcherGameResult)
+      setBetStatus("success")
+      logger.debug("watcher: Bet resolved: SUCCESS", {
+        gameResult: watcherGameResult,
+      })
+    } else if (watcherStatus === "error") {
+      setBetStatus("error")
+      logger.debug("watcher: Bet resolved: ERROR from watcher")
+    }
+  }, [watcherStatus, watcherGameResult])
+
+  const placeDiceBet = useCallback(
+    async (betAmount: bigint, choice: DiceNumber) => {
+      try {
+        resetWagmiWriteContract()
+        setGameResult(null)
+        setWatchTarget(null)
+        resetWatcher()
+
+        const betParams = {
+          game: CASINO_GAME_TYPE.DICE,
+          gameEncodedInput: Dice.encodeInput(choice),
+          betAmount,
+        }
+
+        if (
+          !publicClient ||
+          !chainId ||
+          !connectedAddress ||
+          !writeContractAsync
+        ) {
+          logger.error(
+            "placeBet: Wagmi/OnchainKit clients or address are not initialized.",
+          )
+          setBetStatus("error")
+          return
+        }
+        logger.debug("placeBet: Starting bet process:", {
+          betParams,
+          connectedAddress,
+        })
+        setBetStatus("pending")
+
+        const vrfCost = await _fetchVrfCost(
+          betParams.game,
+          chainId,
+          publicClient,
+        )
+
+        const submitResult = await _submitBetTransaction(
+          betParams,
+          connectedAddress,
+          vrfCost,
+          chainId,
+          writeContractAsync,
+        )
+        const { txHash, contractAddress } = submitResult
+
+        const betId = await _extractBetIdFromReceipt(
+          txHash,
+          contractAddress,
+          betParams.game,
+          chainId,
+          connectedAddress,
+          publicClient,
+        )
+
+        if (!betId) {
+          logger.error(
+            "placeBet: Bet ID was not extracted. Roll event listener will not be started.",
+          )
+          setBetStatus("error")
+          return
+        }
+
+        const { data: rollEventData } = getRollEventData(
+          betParams.game,
+          chainId,
+          betId,
+        )
+        logger.debug("placeBet: Setting up Roll event listener...")
+        setWatchTarget({
+          betId,
+          contractAddress,
+          gameType: betParams.game,
+          eventAbi: rollEventData.abi,
+          eventName: rollEventData.eventName,
+          eventArgs: rollEventData.args,
+        })
+      } catch (error) {
+        logger.error("placeBet: Error placing bet:", error)
+        setBetStatus("error")
+      }
+    },
+    [
+      publicClient,
+      chainId,
+      connectedAddress,
+      writeContractAsync,
+      resetWagmiWriteContract,
+      resetWatcher,
+    ],
+  )
+
+  const resetBetState = useCallback(() => {
+    setBetStatus(null)
+    setGameResult(null)
+    setWatchTarget(null)
+    resetWatcher()
+  }, [resetWatcher])
+
+  return { placeDiceBet, betStatus, gameResult, resetBetState }
+}
+
+async function _fetchVrfCost(
+  gameType: CASINO_GAME_TYPE,
+  chainId: CasinoChainId,
+  publicClient: ReturnType<typeof usePublicClient>,
+): Promise<bigint> {
+  if (!publicClient) {
+    logger.error("_fetchVrfCost: publicClient is undefined")
+    throw new Error("publicClient is undefined")
+  }
+  logger.debug("_fetchVrfCost: Getting VRF cost...")
+  const vrfCostFunctionData = getChainlinkVrfCostFunctionData(
+    gameType,
+    zeroAddress,
+    1,
+    chainId,
+  )
+  const vrfCost = (await publicClient.readContract({
+    address: vrfCostFunctionData.data.to,
+    abi: vrfCostFunctionData.data.abi,
+    functionName: vrfCostFunctionData.data.functionName,
+    args: vrfCostFunctionData.data.args,
+  })) as bigint
+  logger.debug("_fetchVrfCost: VRF cost received:", vrfCost?.toString())
+  return vrfCost
+}
+
+async function _submitBetTransaction(
+  betParams: GenericCasinoBetParams,
+  receiver: Hex,
+  vrfCost: bigint,
+  chainId: CasinoChainId,
+  writeContractAsync: ReturnType<typeof useWriteContract>["writeContractAsync"],
+): Promise<SubmitBetResult> {
+  logger.debug("_submitBetTransaction: Preparing and sending transaction...")
+  const placeBetTxData = getPlaceBetFunctionData(
+    { ...betParams, receiver },
+    chainId,
+  )
+  const txHash = await writeContractAsync({
+    abi: placeBetTxData.data.abi,
+    address: placeBetTxData.data.to,
+    functionName: placeBetTxData.data.functionName,
+    args: placeBetTxData.data.args,
+    value: placeBetTxData.extraData.getValue(betParams.betAmount + vrfCost),
+  })
+  logger.debug("_submitBetTransaction: Transaction sent, hash:", txHash)
+  return {
+    txHash,
+    contractAddress: placeBetTxData.data.to,
+  }
+}
+
+async function _extractBetIdFromReceipt(
+  txHash: Hex,
+  expectedContractAddress: Hex,
+  gameType: CASINO_GAME_TYPE,
+  chainId: CasinoChainId,
+  receiver: Hex,
+  publicClient: ReturnType<typeof usePublicClient>,
+): Promise<bigint | null> {
+  if (!publicClient) {
+    logger.error("_extractBetIdFromReceipt: publicClient is undefined")
+    throw new Error("publicClient is undefined")
+  }
+  logger.debug("_extractBetIdFromReceipt: Waiting for receipt for", txHash)
+  const receipt = await publicClient.waitForTransactionReceipt({ hash: txHash })
+  logger.debug("_extractBetIdFromReceipt: Receipt received.")
+
+  const { data: placeBetEventData } = getPlaceBetEventData(
+    gameType,
+    chainId,
+    receiver,
+  )
+
+  for (const log of receipt.logs) {
+    if (log.address.toLowerCase() !== expectedContractAddress.toLowerCase())
+      continue
+    const decodedLog = decodeEventLog({
+      abi: placeBetEventData.abi,
+      data: log.data,
+      topics: log.topics,
+      strict: false,
+    })
+    if (decodedLog.eventName === placeBetEventData.eventName) {
+      return (decodedLog.args as unknown as { id: bigint }).id
+    }
+  }
+  logger.error("_extractBetIdFromReceipt: Bet ID not found in receipt.")
+  return null
+}
diff --git a/examples/mini-app/src/hooks/useGameHistory.ts b/examples/mini-app/src/hooks/useGameHistory.ts
deleted file mode 100644
index 4f783bb..0000000
--- a/examples/mini-app/src/hooks/useGameHistory.ts
+++ /dev/null
@@ -1,117 +0,0 @@
-import {
-  Bet_OrderBy,
-  CASINO_GAME_TYPE,
-  CasinoBet,
-  CasinoChainId,
-  FORMAT_TYPE,
-  OrderDirection,
-  fetchBets,
-  formatAmount,
-  formatRawAmount,
-} from "@betswirl/sdk-core"
-import { TokenImage } from "@coinbase/onchainkit/token"
-import React, { useState, useEffect, useCallback } from "react"
-import { useAccount } from "wagmi"
-import { createLogger } from "../lib/logger"
-import { ETH_TOKEN } from "../lib/tokens"
-import { toLowerCase } from "../lib/utils"
-
-const logger = createLogger("useGameHistory")
-
-enum HistoryEntryStatus {
-  WonBet = "Won bet",
-  Busted = "Busted",
-}
-
-export interface HistoryEntry {
-  id: string
-  status: HistoryEntryStatus
-  multiplier: number | string
-  payoutAmount: number | string
-  payoutCurrencyIcon: React.ReactElement
-  timestamp: string
-}
-
-function formatRelativeTime(timestampSecs: number): string {
-  const now = new Date()
-  const then = new Date(timestampSecs * 1000)
-  const diffInSeconds = Math.floor((now.getTime() - then.getTime()) / 1000)
-
-  if (diffInSeconds < 0) return "in the future"
-  if (diffInSeconds < 5) return "just now"
-  if (diffInSeconds < 60) return `~${diffInSeconds}s ago`
-
-  const diffInMinutes = Math.floor(diffInSeconds / 60)
-  if (diffInMinutes < 60) return `~${diffInMinutes}m ago`
-
-  const diffInHours = Math.floor(diffInMinutes / 60)
-  if (diffInHours < 24) return `~${diffInHours}h ago`
-
-  const diffInDays = Math.floor(diffInHours / 24)
-  return `~${diffInDays}d ago`
-}
-
-export const useGameHistory = (gameType: CASINO_GAME_TYPE) => {
-  const [gameHistory, setGameHistory] = useState<HistoryEntry[]>([])
-  const [isLoading, setIsLoading] = useState<boolean>(false)
-  const [error, setError] = useState<Error | null>(null)
-  const { chainId, address } = useAccount()
-
-  const fetchHistoryLogic = useCallback(async () => {
-    if (!address || !chainId) {
-      setGameHistory([])
-      setIsLoading(false)
-      logger.error("No user address or chain id", { address, chainId })
-      return
-    }
-
-    setIsLoading(true)
-    setError(null)
-
-    try {
-      const result = await fetchBets(
-        { chainId: chainId as CasinoChainId },
-        {
-          bettor: toLowerCase(address),
-          game: gameType,
-        },
-        undefined,
-        undefined,
-        { key: Bet_OrderBy.BetTimestamp, order: OrderDirection.Desc },
-      )
-
-      if (result.error) {
-        throw result.error
-      }
-
-      const formattedHistory: HistoryEntry[] = result.bets.map((bet: CasinoBet) => ({
-        id: bet.id.toString(),
-        status: bet.isWin ? HistoryEntryStatus.WonBet : HistoryEntryStatus.Busted,
-        multiplier: formatAmount(bet.formattedPayoutMultiplier, FORMAT_TYPE.MINIFY),
-        payoutAmount: formatRawAmount(bet.payout, bet.token.decimals, FORMAT_TYPE.MINIFY),
-        payoutCurrencyIcon: React.createElement(TokenImage, {
-          token: ETH_TOKEN,
-          size: 18,
-        }),
-        timestamp: formatRelativeTime(Number(bet.rollTimestampSecs)),
-      }))
-
-      setGameHistory(formattedHistory)
-      logger.info("Game history fetched", { formattedHistory })
-    } catch (e) {
-      setError(e instanceof Error ? e : new Error("Failed to fetch game history"))
-    } finally {
-      setIsLoading(false)
-    }
-  }, [address, chainId, gameType])
-
-  useEffect(() => {
-    fetchHistoryLogic()
-  }, [fetchHistoryLogic])
-
-  const refreshHistory = useCallback(async () => {
-    await fetchHistoryLogic()
-  }, [fetchHistoryLogic])
-
-  return { gameHistory, isLoading, error, refreshHistory }
-}
diff --git a/examples/mini-app/src/index.css b/examples/mini-app/src/index.css
index 838fe48..25dc691 100644
--- a/examples/mini-app/src/index.css
+++ b/examples/mini-app/src/index.css
@@ -55,6 +55,9 @@
   --color-close-btn-hovered: var(--close-btn-hovered);
   --color-game-result-icon-bg: var(--game-result-icon-bg);
   --color-table-text: var(--table-text);
+  --color-slider-disabled: var(--slider-disabled);
+  --color-slider-disabled-shadow: var(--slider-disabled-shadow);
+  --color-slider-disabled-tooltip: var(--slider-disabled-tooltip);
 }

 @layer base {
@@ -129,6 +132,9 @@
     --close-btn-hovered: var(--dark-stroke);
     --game-result-icon-bg: var(--white);
     --table-text: var(--dark-surface);
+    --slider-disabled: oklch(0.7774 0.0129 276.04);
+    --slider-disabled-shadow: oklch(0.7774 0.0129 276.04 / 0.2);
+    --slider-disabled-tooltip: oklch(0.6138 0.014 271.18);
   }

   .dark {
@@ -174,6 +180,9 @@
     --close-btn-color: var(--dark-on-surface-variant);
     --game-result-icon-bg: var(--dark-surface-high);
     --table-text: var(--white);
+    --slider-disabled: oklch(0.7774 0.0129 276.04);
+    --slider-disabled-shadow: oklch(0.7774 0.0129 276.04 / 0.2);
+    --slider-disabled-tooltip: oklch(0.6138 0.014 271.18);
   }

   @font-face {
diff --git a/examples/mini-app/src/lib/tokens.ts b/examples/mini-app/src/lib/tokens.ts
index 9d152a1..af4ac25 100644
--- a/examples/mini-app/src/lib/tokens.ts
+++ b/examples/mini-app/src/lib/tokens.ts
@@ -5,6 +5,7 @@ export const ETH_TOKEN: Token = {
   address: "",
   symbol: "ETH",
   decimals: 18,
-  image: "https://wallet-api-production.s3.amazonaws.com/uploads/tokens/eth_288.png",
+  image:
+    "https://wallet-api-production.s3.amazonaws.com/uploads/tokens/eth_288.png",
   chainId: 84532,
 }
diff --git a/examples/mini-app/src/lib/utils.ts b/examples/mini-app/src/lib/utils.ts
index 6d4685c..d084cca 100644
--- a/examples/mini-app/src/lib/utils.ts
+++ b/examples/mini-app/src/lib/utils.ts
@@ -1,11 +1,6 @@
 import { type ClassValue, clsx } from "clsx"
 import { twMerge } from "tailwind-merge"
-import { Hex } from "viem"

 export function cn(...inputs: ClassValue[]) {
   return twMerge(clsx(inputs))
 }
-
-export function toLowerCase(address: string): Hex {
-  return `0x${address.toLowerCase()}`
-}
diff --git a/examples/mini-app/src/providers.tsx b/examples/mini-app/src/providers.tsx
index 5d7f9a0..d0a8728 100644
--- a/examples/mini-app/src/providers.tsx
+++ b/examples/mini-app/src/providers.tsx
@@ -1,9 +1,9 @@
+import { type ReactNode } from "react"
 import { OnchainKitProvider } from "@coinbase/onchainkit"
+import { base } from "wagmi/chains"
 import { QueryClient, QueryClientProvider } from "@tanstack/react-query"
-import { type ReactNode } from "react"
 import { http, type Hex } from "viem"
-import { WagmiProvider, createConfig } from "wagmi"
-import { base } from "wagmi/chains"
+import { createConfig, WagmiProvider } from "wagmi"
 import { BettingConfigProvider } from "./context/BettingConfigContext.tsx"

 const CHAIN = base
@@ -37,7 +37,9 @@ export function AppProviders({ children }: { children: ReactNode }) {
             },
           }}
         >
-          <BettingConfigProvider value={{ affiliate }}>{children}</BettingConfigProvider>
+          <BettingConfigProvider value={{ affiliate }}>
+            {children}
+          </BettingConfigProvider>
         </OnchainKitProvider>
       </QueryClientProvider>
     </WagmiProvider>
diff --git a/examples/mini-app/src/types.ts b/examples/mini-app/src/types.ts
index 9750aeb..031ee3a 100644
--- a/examples/mini-app/src/types.ts
+++ b/examples/mini-app/src/types.ts
@@ -1,10 +1,17 @@
-import { COINTOSS_FACE } from "@betswirl/sdk-core"
+import { COINTOSS_FACE, DiceNumber } from "@betswirl/sdk-core"

-export interface GameResult {
+export interface CoinTossResult {
   isWin: boolean
   payout: bigint
   currency: string
   rolled: COINTOSS_FACE
 }

+export interface DiceResult {
+  isWin: boolean
+  payout: bigint
+  currency: string
+  rolled: DiceNumber
+}
+
 export type BetStatus = "pending" | "success" | "error"
diff --git a/examples/mini-app/vite.config.ts b/examples/mini-app/vite.config.ts
index 8919623..79a65e0 100644
--- a/examples/mini-app/vite.config.ts
+++ b/examples/mini-app/vite.config.ts
@@ -1,4 +1,4 @@
-import path from "node:path"
+import path from "path"
 import tailwindcss from "@tailwindcss/vite"
 import react from "@vitejs/plugin-react"
 import { defineConfig } from "vite"
diff --git a/examples/mini-app/vitest.workspace.ts b/examples/mini-app/vitest.workspace.ts
index df748e0..5ed5eca 100644
--- a/examples/mini-app/vitest.workspace.ts
+++ b/examples/mini-app/vitest.workspace.ts
@@ -6,7 +6,9 @@ import { defineWorkspace } from "vitest/config"
 import { storybookTest } from "@storybook/experimental-addon-test/vitest-plugin"

 const dirname =
-  typeof __dirname !== "undefined" ? __dirname : path.dirname(fileURLToPath(import.meta.url))
+  typeof __dirname !== "undefined"
+    ? __dirname
+    : path.dirname(fileURLToPath(import.meta.url))

 // More info at: https://storybook.js.org/docs/writing-tests/test-addon
 export default defineWorkspace([
